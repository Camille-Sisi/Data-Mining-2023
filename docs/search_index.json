[["index.html", "DATA MINING Master Meci - Parcours PISE et CCESE - Option Data", " DATA MINING Master Meci - Parcours PISE et CCESE - Option Data Camille Signoretto, Maîtresse de conférences en économie, Université Paris Cité 2023-04-19 "],["00-Presentation.html", "Présentation À propos de ce document Prérequis Remerciements Licence", " Présentation À propos de ce document Ce document est la version 2023 du cours de Data Mining dispensé aux étudiants de deuxième année de loption Data du master MECI parcours PISE et CCESE. Ce cours est partagé avec Claude Grasland, dont vous trouverez la partie à ladresse suivante : https://cgrasland.gitpages.huma-num.fr/datamining2022/index.html. Ce document est régulièrement corrigé et mis à jour. La version de référence est disponible en ligne à ladresse suivante : https://github.com/Camille-Sisi/Data-Mining-2023. Pour toute suggestion ou correction, nhésitez pas à me contacter par mail. Prérequis Le seul prérequis pour suivre ce document est davoir installé R et RStudio sur votre ordinateur. Il sagit de deux logiciels libres, gratuits, téléchargeables en ligne et fonctionnant sous PC, Mac et Linux. Pour installer R, il suffit de se rendre sur une des pages suivantes1 : Installer R sous Windows Installer R sous Mac Pour installer RStudio, rendez-vous sur la page suivante et téléchargez la version adaptée à votre système : https://www.rstudio.com/products/rstudio/download/#download Remerciements Ce document a bénéficié des suggestions des étudiants qui en ont été les cobayes les premières années. Ce document est généré par lextension bookdown de Yihui Xie et se base sur le template proposé par Julien Barnier pour introduire des exercices interactifs dans son cours de tidyverse. Licence Ce document est mis à disposition selon les termes de la Licence Creative Commons Attribution - Pas dUtilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International. Licence Creative Commons Sous Linux, utilisez votre gestionnaire de packages habituel. "],["01-Base-de-donnees.html", "Section 1 Récupération de la base de données 1.1 Les données du Recensement de la Population (RP) 1.2 Quelles informations intéressantes dans cette base ?", " Section 1 Récupération de la base de données On va travailler cette année sur les données du Recensement de la Population (RP). Cest une base de données riche en informations, qui sappuie sur les enquêtes annuelles du recensement et est produite par lInsee. Les fichiers mis à disposition sur leur site sont au nombre de 9 : ils rassemblent des informations différentes, sur des espaces géographiques différents (canton ou ville, région), et à des niveaux danalyse différents (individus, ménages/logements). Les derniers fichiers disponibles portent sur lannée 2019. Avant de rentrer plus dans les détails, on va charger les librairies principales que lon va utiliser lors de cette séance (si elles ne sont pas installées sur votre RStudio, il faut le faire avant en utilisant la commande install.packages(\"nom.du.package\")), on pourra en appeler dautres dans les deux sections suivantes. # Chargement des librairies library(tidyverse) library(data.table) library(gt) 1.1 Les données du Recensement de la Population (RP) On va travailler plus précisément à partir du fichier Logements ordinaires qui décrit les caractéristiques des logements et celles des ménages qui les occupent. Les données sont localisées au niveau de la commune et de lIRIS. On ne va pas sintéresser à lensemble de la France, pour des questions dintérêt et danalyse, ainsi que des questions pratiques (ces fichiers étant lourds). On va donc télécharger uniquement ce fichier pour la zone A, cest-à-dire lÎle-de-France. Le mieux est de télécharger le fichier puis le dézipper directement dans R comme ci-dessous en copiant le lien URL sur le site de lInsee. Sinon, il reste possible de le télécharger via internet et de lenregistrer dans un de vos dossiers bien spécifiés pour le dézipper ensuite. download.file(url=&quot;https://www.insee.fr/fr/statistiques/fichier/6544344/RP2019_LOGEMTZA_csv.zip&quot;, destfile = &quot;data/RP2019_INDCVIZA_csv.zip&quot;) # Le fichier a donc été téléchargé dans le dossier intitulé &quot;data&quot; du projet R, on va # maintenant le dézipper et enregistrer les fichiers extraits dans le même dossier. unzip(&quot;data/RP2019_INDCVIZA_csv.zip&quot;, exdir = &quot;data&quot;) Il nous reste plus quà charger les données dans R : pour cela on utilise la commande fread du package data.table (à installer avant), car cela va bien plus vite que les fonctions habituelles du type read.csv lorsquon a de gros fichiers. On indique également loption stringsAsFactors=TRUE pour que les variables caractères soient directement transformées en variables factor (dont lutilité est indéniable dans R), et on transforme lobjet obtenu en data.frame. # install.packages(&quot;data.table&quot;) library(data.table) RP &lt;- fread(&quot;data/FD_LOGEMTZA_2019.csv&quot;, stringsAsFactors=TRUE) RP &lt;- as.data.frame(RP) On a donc 69 variables et 2 850 830 observations. Pour se renseigner sur les variables de la table, on peut télécharger également le fichier des métadonnées, avec la commande read.csv cette fois, ce qui nous permet de voir quelles options sont utiles ici : largument sep = nous permet dindiquer comment sont séparées les informations dans le fichier initial, largument encoding = permet que les accents aigus soient compris par R comme tel, et enfin la même option stringsAsFactors=TRUE peut être utilisée ici. # Lecture du fichier de métadonnées meta &lt;- read.csv(file = &#39;data/Varmod_LOGEMT_2019.csv&#39;, sep = &quot;;&quot;, encoding = &quot;UTF-8&quot;, stringsAsFactors = TRUE) On peut enregistrer ce fichier, ainsi que celui contenant les métadonnées, dans le dossier R au format RDS. # Enregistrement des fichiers saveRDS(object = RP, file = &quot;data/menages2019.Rdata&quot;) saveRDS(object = meta, file = &quot;data/menages2019_meta.Rdata&quot;) 1.2 Quelles informations intéressantes dans cette base ? On peut regarder plus précisément les variables disponibles dans cette base de données à partir de la table de métadonnées : on peut le faire avec la fonction view() et dans ce cas la table saffichera dans un nouvel onglet dans votre RStudio ; sinon pour lafficher sur notre document html (notebook ou markdown), on peut utiliser la fonction head() et/ou tail() qui affiche respectivement les premières lignes et les dernières lignes de la table. # view(meta) meta %&gt;% head() %&gt;% gt() #La fonction gt() permet un affichage plus joli pour le document html html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #jawueegdka .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #jawueegdka .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #jawueegdka .gt_caption { padding-top: 4px; padding-bottom: 4px; } #jawueegdka .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #jawueegdka .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #jawueegdka .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jawueegdka .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #jawueegdka .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #jawueegdka .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #jawueegdka .gt_column_spanner_outer:first-child { padding-left: 0; } #jawueegdka .gt_column_spanner_outer:last-child { padding-right: 0; } #jawueegdka .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #jawueegdka .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #jawueegdka .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #jawueegdka .gt_from_md > :first-child { margin-top: 0; } #jawueegdka .gt_from_md > :last-child { margin-bottom: 0; } #jawueegdka .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #jawueegdka .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #jawueegdka .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #jawueegdka .gt_row_group_first td { border-top-width: 2px; } #jawueegdka .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #jawueegdka .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #jawueegdka .gt_first_summary_row.thick { border-top-width: 2px; } #jawueegdka .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jawueegdka .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #jawueegdka .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #jawueegdka .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #jawueegdka .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #jawueegdka .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #jawueegdka .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #jawueegdka .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #jawueegdka .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #jawueegdka .gt_left { text-align: left; } #jawueegdka .gt_center { text-align: center; } #jawueegdka .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #jawueegdka .gt_font_normal { font-weight: normal; } #jawueegdka .gt_font_bold { font-weight: bold; } #jawueegdka .gt_font_italic { font-style: italic; } #jawueegdka .gt_super { font-size: 65%; } #jawueegdka .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #jawueegdka .gt_asterisk { font-size: 100%; vertical-align: 0; } #jawueegdka .gt_indent_1 { text-indent: 5px; } #jawueegdka .gt_indent_2 { text-indent: 10px; } #jawueegdka .gt_indent_3 { text-indent: 15px; } #jawueegdka .gt_indent_4 { text-indent: 20px; } #jawueegdka .gt_indent_5 { text-indent: 25px; } X.U.FEFF.COD_VAR LIB_VAR COD_MOD LIB_MOD TYPE_VAR LONG_VAR COMMUNE Département et commune du lieu de résidence 1001 L'Abergement-Clémenciat (01001) CHAR 5 COMMUNE Département et commune du lieu de résidence 1002 L'Abergement-de-Varey (01002) CHAR 5 COMMUNE Département et commune du lieu de résidence 1004 Ambérieu-en-Bugey (01004) CHAR 5 COMMUNE Département et commune du lieu de résidence 1005 Ambérieux-en-Dombes (01005) CHAR 5 COMMUNE Département et commune du lieu de résidence 1006 Ambléon (01006) CHAR 5 COMMUNE Département et commune du lieu de résidence 1007 Ambronay (01007) CHAR 5 On va corriger le nom de la 1ère colonne qui na pas été bien importée, avec la fonction rename() ; puis on va établir la liste des variables en utilisant la fonction levels. meta &lt;- meta %&gt;% rename(COD_VAR=X.U.FEFF.COD_VAR) levels(meta$COD_VAR) [1] &quot;ACHL&quot; &quot;AEMM&quot; &quot;AEMMR&quot; &quot;AGEMEN8&quot; &quot;ANEM&quot; [6] &quot;ANEMR&quot; &quot;ARM&quot; &quot;ASCEN&quot; &quot;BAIN&quot; &quot;BATI&quot; [11] &quot;CATIRIS&quot; &quot;CATL&quot; &quot;CHAU&quot; &quot;CHFL&quot; &quot;CHOS&quot; [16] &quot;CLIM&quot; &quot;CMBL&quot; &quot;COMMUNE&quot; &quot;CUIS&quot; &quot;DEROU&quot; [21] &quot;DIPLM&quot; &quot;EAU&quot; &quot;EGOUL&quot; &quot;ELEC&quot; &quot;EMPLM&quot; [26] &quot;GARL&quot; &quot;HLML&quot; &quot;ILETUDM&quot; &quot;ILTM&quot; &quot;IMMIM&quot; [31] &quot;INAIM&quot; &quot;INEEM&quot; &quot;INP11M&quot; &quot;INP15M&quot; &quot;INP17M&quot; [36] &quot;INP19M&quot; &quot;INP24M&quot; &quot;INP3M&quot; &quot;INP5M&quot; &quot;INP60M&quot; [41] &quot;INP65M&quot; &quot;INP75M&quot; &quot;INPAM&quot; &quot;INPER&quot; &quot;INPER1&quot; [46] &quot;INPER2&quot; &quot;INPOM&quot; &quot;INPSM&quot; &quot;IPONDL&quot; &quot;IRANM&quot; [51] &quot;IRIS&quot; &quot;METRODOM&quot; &quot;NBPI&quot; &quot;RECHM&quot; &quot;REGION&quot; [56] &quot;SANI&quot; &quot;SANIDOM&quot; &quot;SEXEM&quot; &quot;STAT_CONJM&quot; &quot;STOCD&quot; [61] &quot;SURF&quot; &quot;TACTM&quot; &quot;TPM&quot; &quot;TRANSM&quot; &quot;TRIRIS&quot; [66] &quot;TYPC&quot; &quot;TYPL&quot; &quot;VOIT&quot; &quot;WC&quot; Les codes des variables nétant pas très parlant, on va les afficher avec leur intitulé : pour cela, il suffit de repartir de la table meta en sélectionnant les 2 colonnes qui nous intéressent et en naffichant pas les valeurs dupliquées avec la fonction unique(). meta %&gt;% select(COD_VAR, LIB_VAR) %&gt;% unique() %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #pqidefutck .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pqidefutck .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pqidefutck .gt_caption { padding-top: 4px; padding-bottom: 4px; } #pqidefutck .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pqidefutck .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #pqidefutck .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pqidefutck .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pqidefutck .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pqidefutck .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pqidefutck .gt_column_spanner_outer:first-child { padding-left: 0; } #pqidefutck .gt_column_spanner_outer:last-child { padding-right: 0; } #pqidefutck .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #pqidefutck .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #pqidefutck .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pqidefutck .gt_from_md > :first-child { margin-top: 0; } #pqidefutck .gt_from_md > :last-child { margin-bottom: 0; } #pqidefutck .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pqidefutck .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #pqidefutck .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #pqidefutck .gt_row_group_first td { border-top-width: 2px; } #pqidefutck .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pqidefutck .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #pqidefutck .gt_first_summary_row.thick { border-top-width: 2px; } #pqidefutck .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pqidefutck .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pqidefutck .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pqidefutck .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pqidefutck .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pqidefutck .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pqidefutck .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #pqidefutck .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pqidefutck .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pqidefutck .gt_left { text-align: left; } #pqidefutck .gt_center { text-align: center; } #pqidefutck .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pqidefutck .gt_font_normal { font-weight: normal; } #pqidefutck .gt_font_bold { font-weight: bold; } #pqidefutck .gt_font_italic { font-style: italic; } #pqidefutck .gt_super { font-size: 65%; } #pqidefutck .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #pqidefutck .gt_asterisk { font-size: 100%; vertical-align: 0; } #pqidefutck .gt_indent_1 { text-indent: 5px; } #pqidefutck .gt_indent_2 { text-indent: 10px; } #pqidefutck .gt_indent_3 { text-indent: 15px; } #pqidefutck .gt_indent_4 { text-indent: 20px; } #pqidefutck .gt_indent_5 { text-indent: 25px; } COD_VAR LIB_VAR COMMUNE Département et commune du lieu de résidence ARM Arrondissement municipal de résidence (Paris,Lyon et Marseille) IRIS Code IRIS du lieu de résidence ACHL Période d'achèvement de la construction de la maison ou de l'immeuble AEMM Année d'emménagement dans le logement (détaillée) AEMMR Année d'emménagement dans le logement (regroupée) AGEMEN8 Âge regroupé de la personne de référence du ménage en 8 classes d'âge ANEM Ancienneté d'emménagement dans le logement (détaillée) ANEMR Ancienneté d'emménagement dans le logement (regroupée) ASCEN Desserte par un ascenseur BAIN Baignoire ou douche (DOM) BATI Aspect du bâti (DOM) CATIRIS Catégorie de l'IRIS CATL Catégorie de logement CHAU Moyen de chauffage du logement (DOM) CHFL Chauffage central du logement (France métropolitaine) CHOS Chauffe-eau solaire (DOM) CLIM Existence d'au moins une pièce climatisée (DOM) CMBL Combustible principal du logement (France métropolitaine) CUIS Cuisine intérieure avec évier (DOM) DEROU Nombre de deux-roues à moteur du ménage (DOM) DIPLM Diplôme le plus élevé obtenu (personne de référence du ménage) EAU Point d'eau potable à l'intérieur du logement (DOM) EGOUL Mode d'évacuation des eaux usées (DOM) ELEC Électricité dans le logement (DOM) EMPLM Condition d'emploi (personne de référence du ménage) GARL Emplacement réservé de stationnement HLML Appartenance du logement à un organisme HLM ILETUDM Indicateur du lieu d'études (personne de référence du ménage) ILTM Indicateur de lieu de travail (personne de référence du ménage) IMMIM Situation quant à l'immigration (personne de référence du ménage) INAIM Indicateur du lieu de naissance (personne de référence du ménage) INEEM Nombre d'élèves, étudiants ou stagiaires âgés de 14 ans ou plus du ménage INP11M Nombre de personnes âgées de 11 ans ou moins du ménage INP15M Nombre de personnes âgées de 15 ans ou moins du ménage INP17M Nombre de personnes âgées de 17 ans ou moins du ménage INP19M Nombre de personnes âgées de 19 ans ou plus du ménage INP24M Nombre de personnes âgées de 24 ans ou moins du ménage INP3M Nombre de personnes âgées de 3 ans ou moins du ménage INP5M Nombre de personnes âgées de 5 ans ou moins du ménage INP60M Nombre de personnes âgées de 60 ans ou plus du ménage INP65M Nombre de personnes âgées de 65 ans ou plus du ménage INP75M Nombre de personnes âgées de 75 ans ou plus du ménage INPAM Nombre de personnes actives du ménage INPER Nombre de personnes du ménage INPER1 Nombre de personnes du ménage, de sexe masculin INPER2 Nombre de personnes du ménage, de sexe féminin INPOM Nombre de personnes actives ayant un emploi du ménage INPSM Nombre de personnes scolarisées du ménage IPONDL Poids du logement IRANM Indicateur du lieu de résidence antérieure au 1er janvier de l'annéee précédente de la personne de référence du ménage METRODOM Indicateur Métropole ou DOM du lieu de résidence NBPI Nombre de pièces du logement RECHM Ancienneté de recherche d'emploi (personne de référence du ménage) REGION Région du lieu de résidence SANI Installations sanitaires (France métropolitaine) SANIDOM Installations sanitaires (DOM) SEXEM Sexe de la personne de référence du ménage STAT_CONJM Statut conjugal de la personne de référence du ménage STOCD Statut d'occupation détaillé du logement SURF Superficie du logement TACTM Type d'activité de la personne de référence du ménage TPM Temps de travail (personne de référence du ménage) TRANSM Mode de transport principal le plus souvent utilisé pour aller travailler (personne de référence du ménage) TRIRIS Code TRIRIS du lieu de résidence TYPC Type de construction TYPL Type de logement VOIT Nombre de voitures du ménage WC Présence de W.-C. à l'intérieur du logement (DOM) Ou si on veut les afficher par ordre alphabétique selon le nom de la variable, on peut utiliser la fonction arrange() qui permet de trier une table de données selon la variable indiquée : meta %&gt;% select(COD_VAR, LIB_VAR) %&gt;% unique() %&gt;% arrange(COD_VAR) %&gt;% gt() Pour une analyse des logements, on peut retenir les variables suivantes qui nous donnent des informations intéressantes : lancienneté demménagement dans le logement, la catégorie de logement, lappartenance du logement à un organisme HLM, le nombre de personnes du ménage, le nombre de pièces du logement, le statut doccupation détaillé du logement, la superficie du logement, le type de logement ; ainsi que les variables géographiques qui nous serviront pour la suite : département et commune du lieu de résidence, arrondissement le cas échéant, code IRIS, code TRIRIS du lieu de résidence ; et éventuellement : lexistence ou non dun ascenseur, le moyen de chauffage, lemplacement réservé de stationnement, lindicateur de lieu de travail de la personne de référence du ménage, le mode de transport principal le plus souvent utilisé pour aller travailler de la personne de référence, et le nombre de voitures du ménage (auquel on peut ajouter dans ce cas le nombre de deux-roues à moteur du ménage) ; il ne faut pas oublier non plus lexistence dune variable nommée poids du logement qui constitue la pondération. "],["02-Manipulation-base.html", "Section 2 Manipulation de la base 2.1 Format des données - WIDE ou LONG 2.2 Sélectionner un champ réduit de la base, séparer les données", " Section 2 Manipulation de la base On peut maintenant regarder à quoi ressemble la table principale, celle des données. RP %&gt;% head() %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ynzbffrmww .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ynzbffrmww .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ynzbffrmww .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ynzbffrmww .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ynzbffrmww .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ynzbffrmww .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ynzbffrmww .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ynzbffrmww .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ynzbffrmww .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ynzbffrmww .gt_column_spanner_outer:first-child { padding-left: 0; } #ynzbffrmww .gt_column_spanner_outer:last-child { padding-right: 0; } #ynzbffrmww .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ynzbffrmww .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ynzbffrmww .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ynzbffrmww .gt_from_md > :first-child { margin-top: 0; } #ynzbffrmww .gt_from_md > :last-child { margin-bottom: 0; } #ynzbffrmww .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ynzbffrmww .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ynzbffrmww .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ynzbffrmww .gt_row_group_first td { border-top-width: 2px; } #ynzbffrmww .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ynzbffrmww .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ynzbffrmww .gt_first_summary_row.thick { border-top-width: 2px; } #ynzbffrmww .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ynzbffrmww .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ynzbffrmww .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ynzbffrmww .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ynzbffrmww .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ynzbffrmww .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ynzbffrmww .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #ynzbffrmww .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ynzbffrmww .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ynzbffrmww .gt_left { text-align: left; } #ynzbffrmww .gt_center { text-align: center; } #ynzbffrmww .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ynzbffrmww .gt_font_normal { font-weight: normal; } #ynzbffrmww .gt_font_bold { font-weight: bold; } #ynzbffrmww .gt_font_italic { font-style: italic; } #ynzbffrmww .gt_super { font-size: 65%; } #ynzbffrmww .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #ynzbffrmww .gt_asterisk { font-size: 100%; vertical-align: 0; } #ynzbffrmww .gt_indent_1 { text-indent: 5px; } #ynzbffrmww .gt_indent_2 { text-indent: 10px; } #ynzbffrmww .gt_indent_3 { text-indent: 15px; } #ynzbffrmww .gt_indent_4 { text-indent: 20px; } #ynzbffrmww .gt_indent_5 { text-indent: 25px; } COMMUNE ARM IRIS ACHL AEMM AEMMR AGEMEN8 ANEM ANEMR ASCEN BAIN BATI CATIRIS CATL CHAU CHFL CHOS CLIM CMBL CUIS DEROU DIPLM EAU EGOUL ELEC EMPLM GARL HLML ILETUDM ILTM IMMIM INAIM INEEM INP11M INP15M INP17M INP19M INP24M INP3M INP60M INP65M INP5M INP75M INPAM INPER INPER1 INPER2 INPOM INPSM IPONDL IRANM METRODOM NBPI RECHM REGION SANI SANIDOM SEXEM STAT_CONJM STOCD SURF TACTM TPM TRANSM TRIRIS TYPC TYPL VOIT WC 75056 75101 751010101 B12 2006 9 20 10 3 1 Z Z H 1 Z 3 Z Z 4 Z Z 17 Z Z Z ZZ 2 1 3 Z 2 1 2 0 1 1 2 2 0 0 0 0 0 1 3 2 1 1 2 2.7933037 1 M 02 9 11 2 ZZ 1 3 22 4 22 Z Z 750011 3 2 1 Z 75056 75101 751010101 B11 2015 9 25 1 0 2 Z Z H 1 Z 3 Z Z 4 Z Z 17 Z Z Z ZZ 2 2 Z Z 1 6 0 1 1 1 2 1 1 0 0 1 0 2 3 1 2 1 1 1.2335216 9 M 03 1 11 2 ZZ 2 1 21 4 12 Z Z 750011 3 2 0 Z 75056 75101 751010101 C115 0 0 YY 999 99 Y Z Z H 3 Z Y Z Z Y Z Z YY Z Z Z YY Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y 1.2335042 Y M YY Y 11 Y ZZ Y Y 0 Y YY Y Y 750011 Y 2 X Z 75056 75101 751010101 C115 2016 9 25 0 0 2 Z Z H 1 Z 2 Z Z 2 Z Z 18 Z Z Z 16 2 2 Z 1 2 3 0 0 0 0 2 0 0 0 0 0 0 2 2 1 1 1 0 1.2335216 5 M 02 Z 11 2 ZZ 1 2 21 2 11 1 5 750011 3 2 1 Z 75056 75101 751010101 C115 2015 9 20 1 0 2 Z Z H 1 Z 3 Z Z 4 Z Z 15 Z Z Z ZZ 2 1 1 Z 2 2 1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 1 1.2335216 5 M 01 0 11 2 ZZ 2 6 22 1 22 Z Z 750011 3 2 0 Z 75056 75101 751010101 A11 2013 9 25 3 1 1 Z Z H 1 Z 1 Z Z 4 Z Z 17 Z Z Z 22 2 1 Z 1 1 6 0 1 1 1 2 1 1 0 0 1 0 2 3 1 2 2 0 0.8138559 1 M 03 Z 11 2 ZZ 1 1 22 4 11 1 6 750011 3 2 0 Z La fonction str() ou son équivalent en langage dplyr la fonction glimpse nous donne la liste des variables avec cette fois leur format et leurs modalités (les premières seulement sil y en a beaucoup). # str(RP) RP %&gt;% glimpse() Rows: 2,850,830 Columns: 69 $ COMMUNE &lt;int&gt; 75056, 75056, 75056, 75056, 75056, 75056, 75056, 75056, 750~ $ ARM &lt;fct&gt; 75101, 75101, 75101, 75101, 75101, 75101, 75101, 75101, 751~ $ IRIS &lt;fct&gt; 751010101, 751010101, 751010101, 751010101, 751010101, 7510~ $ ACHL &lt;fct&gt; B12, B11, C115, C115, C115, A11, A11, A11, A11, A11, A11, A~ $ AEMM &lt;int&gt; 2006, 2015, 0, 2016, 2015, 2013, 2013, 2013, 2014, 2013, 20~ $ AEMMR &lt;int&gt; 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 9,~ $ AGEMEN8 &lt;fct&gt; 20, 25, YY, 25, 20, 25, 55, 55, 40, 80, 40, 25, 25, 40, 25,~ $ ANEM &lt;int&gt; 10, 1, 999, 0, 1, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 12, 3, 3, 2~ $ ANEMR &lt;int&gt; 3, 0, 99, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 4, 0~ $ ASCEN &lt;fct&gt; 1, 2, Y, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,~ $ BAIN &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ BATI &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ CATIRIS &lt;fct&gt; H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H,~ $ CATL &lt;int&gt; 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,~ $ CHAU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ CHFL &lt;fct&gt; 3, 3, Y, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 3,~ $ CHOS &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ CLIM &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ CMBL &lt;fct&gt; 4, 4, Y, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 1, 2, 4, 4, 2, 4, 4,~ $ CUIS &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ DEROU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ DIPLM &lt;fct&gt; 17, 17, YY, 18, 15, 17, 13, 13, 12, 13, 01, 17, 17, 14, 17,~ $ EAU &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ EGOUL &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ ELEC &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ EMPLM &lt;fct&gt; ZZ, ZZ, YY, 16, ZZ, 22, ZZ, ZZ, ZZ, ZZ, 16, 16, 16, 16, 16,~ $ GARL &lt;fct&gt; 2, 2, Y, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,~ $ HLML &lt;fct&gt; 1, 2, Y, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,~ $ ILETUDM &lt;fct&gt; 3, Z, Y, Z, 1, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ $ ILTM &lt;fct&gt; Z, Z, Y, 1, Z, 1, Z, Z, Z, Z, 1, 3, 3, 1, 3, Z, 1, Z, 1, 1,~ $ IMMIM &lt;fct&gt; 2, 1, Y, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2,~ $ INAIM &lt;fct&gt; 1, 6, Y, 3, 2, 6, 1, 1, 1, 1, 6, 6, 6, 1, 6, 1, 6, 2, 1, 2,~ $ INEEM &lt;fct&gt; 2, 0, Y, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,~ $ INP11M &lt;fct&gt; 0, 1, Y, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 1, 0, 0,~ $ INP15M &lt;fct&gt; 1, 1, Y, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0,~ $ INP17M &lt;fct&gt; 1, 1, Y, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 1, 2, 0, 0,~ $ INP19M &lt;fct&gt; 2, 2, Y, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1,~ $ INP24M &lt;fct&gt; 2, 1, Y, 0, 1, 1, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 2, 0, 1,~ $ INP3M &lt;fct&gt; 0, 1, Y, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,~ $ INP60M &lt;fct&gt; 0, 0, Y, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0,~ $ INP65M &lt;fct&gt; 0, 0, Y, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0,~ $ INP5M &lt;fct&gt; 0, 1, Y, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,~ $ INP75M &lt;fct&gt; 0, 0, Y, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ $ INPAM &lt;fct&gt; 1, 2, Y, 2, 0, 2, 0, 0, 1, 0, 1, 1, 1, 2, 1, 0, 2, 1, 1, 1,~ $ INPER &lt;fct&gt; 3, 3, Y, 2, 1, 3, 1, 1, 3, 1, 4, 1, 1, 4, 1, 1, 3, 3, 2, 1,~ $ INPER1 &lt;fct&gt; 2, 1, Y, 1, 0, 1, 1, 1, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 1, 0,~ $ INPER2 &lt;fct&gt; 1, 2, Y, 1, 1, 2, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 3, 3, 1, 1,~ $ INPOM &lt;fct&gt; 1, 1, Y, 1, 0, 2, 0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 1, 0, 1, 1,~ $ INPSM &lt;fct&gt; 2, 1, Y, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 1, 0, 0, 2, 2, 0, 0,~ $ IPONDL &lt;dbl&gt; 2.7933037, 1.2335216, 1.2335042, 1.2335216, 1.2335216, 0.81~ $ IRANM &lt;fct&gt; 1, 9, Y, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4,~ $ METRODOM &lt;fct&gt; M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M,~ $ NBPI &lt;fct&gt; 02, 03, YY, 02, 01, 03, 01, 01, 03, 02, 04, 02, 02, 03, 02,~ $ RECHM &lt;fct&gt; 9, 1, Y, Z, 0, Z, 9, 9, 2, 0, Z, Z, Z, Z, Z, 0, Z, 1, Z, Z,~ $ REGION &lt;int&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,~ $ SANI &lt;fct&gt; 2, 2, Y, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,~ $ SANIDOM &lt;fct&gt; ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ, ZZ,~ $ SEXEM &lt;fct&gt; 1, 2, Y, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2,~ $ STAT_CONJM &lt;fct&gt; 3, 1, Y, 2, 6, 1, 6, 6, 6, 4, 1, 6, 6, 1, 6, 5, 6, 6, 1, 6,~ $ STOCD &lt;int&gt; 22, 21, 0, 21, 22, 22, 22, 22, 22, 21, 22, 22, 22, 22, 22, ~ $ SURF &lt;fct&gt; 4, 4, Y, 2, 1, 4, 1, 1, 4, 2, 4, 2, 2, 4, 2, 4, 3, 3, 5, 1,~ $ TACTM &lt;fct&gt; 22, 12, YY, 11, 22, 11, 21, 21, 12, 21, 11, 11, 11, 11, 11,~ $ TPM &lt;fct&gt; Z, Z, Y, 1, Z, 1, Z, Z, Z, Z, 1, 1, 1, 1, 1, Z, 1, Z, 1, 1,~ $ TRANSM &lt;fct&gt; Z, Z, Y, 5, Z, 6, Z, Z, Z, Z, 6, 6, 6, 2, 6, Z, 6, Z, 5, 6,~ $ TRIRIS &lt;fct&gt; 750011, 750011, 750011, 750011, 750011, 750011, 750011, 750~ $ TYPC &lt;fct&gt; 3, 3, Y, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,~ $ TYPL &lt;int&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,~ $ VOIT &lt;fct&gt; 1, 0, X, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,~ $ WC &lt;fct&gt; Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z, Z,~ Les variables sont en format, soit int (integer -nombres entiers), soit fct (factor), ou encore dbl (double - nombres réels). On remarque que la plupart des variables ont des modalités en chiffres et/ou lettres, ce qui signifie quil faudra probablement recoder ces modalités pour leur donner des libellés dans nos analyses descriptives (tableaux ou graphiques). Par ailleurs, certaines variables ont été laissées en format integer bien que lon avait mis loption stringsAsFactors=TRUE lors du chargement des données, or ces chiffres correspondent bien à des modalités dune variable catégorielle, il faudra donc le corriger ultérieurement. Dernière remarque, si on avait eu des valeurs manquantes sur certaines variables, elles se seraient ici affichées avec la modalité NA, cela ne semble pas le cas, à vérifier par la suite. 2.1 Format des données - WIDE ou LONG La question du format de la table de données est importante, on distingue généralement le format wide du format long : le premier renvoie au cas où chaque ligne correspond a un et un seul individu (ou autre niveau de lanalyse : une entreprise, un ménage, un logement, etc.), et toutes les informations le concernant sont données en colonnes (ce qui peut augmenter rapidement le nombre de colonnes), cest lexemple dune information que lon a sur plusieurs années, chaque colonne correspondant à linformation de lannée en question ; le second, au contraire, multiplie les lignes pour un seul individu, mais il y a alors moins de colonnes, à partir du même exemple précédent, il y aura cette fois une colonne indiquant lannée et une colonne contenant linformation. Ici, chaque ligne correspond à un logement auquel est associé un ménage (ou le contraire si vous préférez) ; on est bien dans un format wide. En revanche, si on considère que notre niveau danalyse est la commune, on voit alors quon dispose de plusieurs lignes par commune et si lon veut garder quelques informations à ce niveau en nayant plus quune ligne par commune, on peut changer de format. Le package tidyverse contient deux fonctions qui permettent de passer dun format à un autre : pivot_longer() et pivot_wider() présentés en détails ici. Nous aurons loccasion de les utiliser ultérieurement dans ce cours. 2.2 Sélectionner un champ réduit de la base, séparer les données Manipuler une base de données, cest aussi travailler ou créer une table réduite, surtout quand on a des données volumineuses comme ici : cest donc choisir un champ particulier de la base. On peut par exemple ici choisir un champ géographique plus réduit au sein de lÎle-de-France, à partir de la commune. On peut aussi choisir de séparer les données en créant 2 tables selon linformation donnée : le logement ou la personne de référence du ménage. Comme vous le savez très probablement, dans le langage tidyverse, pour faire des sélections sur les lignes ou observations dans une table de données, on utilise la fonction filter() ; pour faire des sélections sur les colonnes ou variables, on utilise la fonction select() ; pour supprimer des variables, on utilise également select() avec un - devant la (ou les) variable(s) à supprimer (dans le langage R de base, on peut aussi utiliser la fonction subset()). EXERCICES : Créer trois nouvelles bases selon les indications suivantes : la première que vous nommerez RP_Paris et qui rassemblera les données pour le seul département de Paris ; la deuxième que nous nommerez RP_menage et qui comprendra les données pour les seules variables relatives à la personne de référence du ménage ; la troisième que vous nommerez RP_log_Paris et qui rassemblera les données pour le seul département de Paris et comprendra toutes les variables sauf celles relatives à la personne de référence du ménage. RP_Paris &lt;- RP %&gt;% filter(COMMUNE == &quot;75056&quot;) RP_menage &lt;- RP %&gt;% select(&quot;AEMM&quot;, &quot;AEMMR&quot;, &quot;AGEMEN8&quot;, &quot;ANEM&quot;, &quot;ANEMR&quot;, &quot;DIPLM&quot;, &quot;EMPLM&quot;, &quot;ILETUDM&quot;, &quot;ILTM&quot;, &quot;IMMIM&quot;, &quot;INAIM&quot;, &quot;IRANM&quot;, &quot;RECHM&quot;, &quot;SEXEM&quot;, &quot;STAT_CONJM&quot;, &quot;TACTM&quot;, &quot;TPM&quot;, &quot;TRANSM&quot;) RP_log_Paris &lt;- RP %&gt;% filter(COMMUNE == &quot;75056&quot;) %&gt;% select(-c(&quot;AEMM&quot;, &quot;AEMMR&quot;, &quot;AGEMEN8&quot;, &quot;ANEM&quot;, &quot;ANEMR&quot;, &quot;DIPLM&quot;, &quot;EMPLM&quot;, &quot;ILETUDM&quot;, &quot;ILTM&quot;, &quot;IMMIM&quot;, &quot;INAIM&quot;, &quot;IRANM&quot;, &quot;RECHM&quot;, &quot;SEXEM&quot;, &quot;STAT_CONJM&quot;, &quot;TACTM&quot;, &quot;TPM&quot;, &quot;TRANSM&quot;)) "],["03-Manipulation-variables.html", "Section 3 Manipulation des variables 3.1 Manipulation des variables qualitatives 3.2 Manipulation des variables quantitatives", " Section 3 Manipulation des variables Dans la manipulation des variables, lune des premières choses à réaliser est de les définir dans le bon format, variables quantitatives/continues ou variables qualitatives/catégorielles. On la vu dans la section précédente, certaines variables sont encore codées comme des nombres entiers (integer) alors que sont des variables catégorielles. On va donc corriger cela. RP &lt;- RP %&gt;% mutate(COMMUNE=as.factor(COMMUNE), AEMM=as.factor(AEMM), AEMMR=as.factor(AEMMR), ANEMR=as.factor(ANEMR), CATL=as.factor(CATL), REGION=as.factor(REGION), STOCD=as.factor(STOCD), TYPL=as.factor(TYPL)) On peut ainsi vérifier que ces variables sont bien des variables facteurs en regardant combien de modalités elles ont et quelles sont-elles. Par exemple, pour deux de nos variables ci-dessous : nlevels(RP$REGION) [1] 1 levels(RP$REGION) [1] &quot;11&quot; nlevels(RP$TYPL) [1] 6 levels(RP$TYPL) [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; Si on navait pas mis loption transformant les variables caractères en variables facteurs lors du chargement des données, on pourrait le faire maintenant en utilisant la fonction mutate_if ou la combinaison de mutate et across(where()) comme ceci RP %&gt;% mutate_if(is.character, as.factor) ou RP %&gt;% mutate(across(where(is.character), as.factor)). On peut enfin vérifier quelles sont les variables numériques qui restent, en les sélectionnant avec select(where()) ou select_if() : # RP %&gt;% select_if(is.numeric) %&gt;% head() %&gt;% gt() RP %&gt;% select(where(is.numeric)) %&gt;% head() %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #iuuvwqqdlv .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #iuuvwqqdlv .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iuuvwqqdlv .gt_caption { padding-top: 4px; padding-bottom: 4px; } #iuuvwqqdlv .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #iuuvwqqdlv .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #iuuvwqqdlv .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iuuvwqqdlv .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iuuvwqqdlv .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #iuuvwqqdlv .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #iuuvwqqdlv .gt_column_spanner_outer:first-child { padding-left: 0; } #iuuvwqqdlv .gt_column_spanner_outer:last-child { padding-right: 0; } #iuuvwqqdlv .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #iuuvwqqdlv .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #iuuvwqqdlv .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #iuuvwqqdlv .gt_from_md > :first-child { margin-top: 0; } #iuuvwqqdlv .gt_from_md > :last-child { margin-bottom: 0; } #iuuvwqqdlv .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #iuuvwqqdlv .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #iuuvwqqdlv .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #iuuvwqqdlv .gt_row_group_first td { border-top-width: 2px; } #iuuvwqqdlv .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iuuvwqqdlv .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #iuuvwqqdlv .gt_first_summary_row.thick { border-top-width: 2px; } #iuuvwqqdlv .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iuuvwqqdlv .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iuuvwqqdlv .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #iuuvwqqdlv .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #iuuvwqqdlv .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iuuvwqqdlv .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iuuvwqqdlv .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #iuuvwqqdlv .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iuuvwqqdlv .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #iuuvwqqdlv .gt_left { text-align: left; } #iuuvwqqdlv .gt_center { text-align: center; } #iuuvwqqdlv .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #iuuvwqqdlv .gt_font_normal { font-weight: normal; } #iuuvwqqdlv .gt_font_bold { font-weight: bold; } #iuuvwqqdlv .gt_font_italic { font-style: italic; } #iuuvwqqdlv .gt_super { font-size: 65%; } #iuuvwqqdlv .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #iuuvwqqdlv .gt_asterisk { font-size: 100%; vertical-align: 0; } #iuuvwqqdlv .gt_indent_1 { text-indent: 5px; } #iuuvwqqdlv .gt_indent_2 { text-indent: 10px; } #iuuvwqqdlv .gt_indent_3 { text-indent: 15px; } #iuuvwqqdlv .gt_indent_4 { text-indent: 20px; } #iuuvwqqdlv .gt_indent_5 { text-indent: 25px; } ANEM IPONDL 10 2.7933037 1 1.2335216 999 1.2335042 0 1.2335216 1 1.2335216 3 0.8138559 Plus généralement, il est souvent dusage dutiliser la fonction summary() pour donner une idée sur lensemble des variables, soit de la distribution pour les variables quantitatives, soit de la répartition des différentes modalités pour les variables qualitatives ; la fonction permet également de nous donner linformation sur lexistence et le nombre de valeurs manquantes pour chaque variable. summary(RP) COMMUNE ARM IRIS ACHL 75056 : 555467 ZZZZZ :2295363 ZZZZZZZZZ: 581311 B12 :818140 92012 : 26820 75115 : 60460 913770114: 3552 B11 :649489 93048 : 20906 75118 : 49438 920120303: 3464 C100 :365485 92026 : 19890 75120 : 42859 771830102: 2806 A11 :334104 93066 : 19773 75113 : 42469 930700109: 2790 A12 :272452 95018 : 18179 75117 : 42407 770580104: 2761 C115 : 52035 (Other):2189795 (Other): 317834 (Other) :2254146 (Other):359125 AEMM AEMMR AGEMEN8 ANEM 0 : 305073 9 :1853886 40 :769947 Min. : 0.0 2015 : 206636 0 : 305073 25 :668407 1st Qu.: 3.0 2016 : 188969 8 : 297912 55 :438609 Median : 10.0 2017 : 159198 7 : 196169 65 :375519 Mean :118.9 2014 : 155990 6 : 132864 YY :305073 3rd Qu.: 28.0 2013 : 124943 5 : 42981 80 :175740 Max. :999.0 (Other):1710021 (Other): 21945 (Other):117535 ANEMR ASCEN BAIN BATI CATIRIS CATL 1 :588102 1: 937624 Z:2850830 Z:2850830 A: 30035 1:2545757 3 :519405 2:1608133 D: 5918 2: 37266 2 :459050 Y: 305073 H:2233566 3: 80286 0 :331413 Z: 581311 4: 187521 99 :305073 4 :277251 (Other):370536 CHAU CHFL CHOS CLIM CMBL CUIS Z:2850830 1:966755 Z:2850830 Z:2850830 1: 379332 Z:2850830 2:817764 2:1028138 3:688397 3: 150297 4: 72841 4: 860916 Y:305073 5: 18780 6: 108294 Y: 305073 DEROU DIPLM EAU EGOUL ELEC Z:2850830 18 :473997 Z:2850830 Z:2850830 Z:2850830 13 :452331 17 :307120 YY :305073 16 :286439 14 :261403 (Other):764467 EMPLM GARL HLML ILETUDM ILTM 16 :1327619 1:1506531 1: 537003 Z :2421856 Z :863675 ZZ : 863675 2:1039226 2:2008754 Y : 305073 3 :725591 YY : 305073 Y: 305073 Y: 305073 1 : 56301 2 :474425 21 : 117569 3 : 42715 1 :454269 15 : 105008 2 : 16778 Y :305073 22 : 82872 4 : 7948 4 : 24030 (Other): 49014 (Other): 159 (Other): 3767 IMMIM INAIM INEEM INP11M INP15M 1: 577892 1:479110 0 :2148455 0 :1958176 0 :1829727 2:1967865 2:676390 Y : 305073 Y : 305073 1 : 327706 Y: 305073 3:652878 1 : 298391 1 : 304764 Y : 305073 4: 59905 2 : 85141 2 : 210685 2 : 268584 5: 1536 3 : 12186 3 : 58780 3 : 91461 6:675938 4 : 1364 4 : 11010 4 : 21893 Y:305073 (Other): 220 (Other): 2342 (Other): 6386 INP17M INP19M INP24M INP3M 0 :1766013 2 :1183058 0 :1486207 0 :2275034 1 : 341311 1 :1066824 1 : 478506 Y : 305073 Y : 305073 Y : 305073 2 : 380933 1 : 226415 2 : 295837 3 : 203339 Y : 305073 2 : 42123 3 : 106336 4 : 66880 3 : 143992 3 : 2088 4 : 27314 5 : 13938 4 : 40074 4 : 79 (Other): 8946 (Other): 11718 (Other): 16045 (Other): 18 INP60M INP65M INP5M INP75M 0 :1715731 0 :1917057 0 :2181169 0 :2247449 1 : 529250 1 : 424697 Y : 305073 Y : 305073 Y : 305073 Y : 305073 1 : 261137 1 : 231763 2 : 297942 2 : 202800 2 : 92643 2 : 66397 3 : 2606 3 : 1114 3 : 10034 3 : 126 4 : 208 4 : 78 4 : 714 4 : 18 (Other): 20 (Other): 11 (Other): 60 (Other): 4 INPAM INPER INPER1 INPER2 1 :933808 1 :930543 1 :1286415 1 :1401005 2 :824575 2 :712282 0 : 609245 2 : 467215 0 :648315 3 :370524 2 : 442121 0 : 464663 Y :305073 4 :334420 Y : 305073 Y : 305073 3 :107490 Y :305073 3 : 162673 3 : 165457 4 : 26667 5 :136363 4 : 36238 4 : 37596 (Other): 4902 (Other): 61625 (Other): 9065 (Other): 9821 INPOM INPSM IPONDL IRANM 1 :961312 0 :1646565 Min. : 0.000 1 :2259196 0 :779020 1 : 451745 1st Qu.: 1.004 Y : 305073 2 :711470 Y : 305073 Median : 1.183 2 : 88870 Y :305073 2 : 301109 Mean : 2.068 3 : 74285 3 : 76984 3 : 108144 3rd Qu.: 3.106 4 : 69015 4 : 14898 4 : 28347 Max. :506.470 5 : 36523 (Other): 2073 (Other): 9847 (Other): 17868 METRODOM NBPI RECHM REGION SANI SANIDOM M:2850830 03 :600847 0: 538158 11:2850830 0: 17456 ZZ:2850830 04 :519672 1: 95994 1: 111392 02 :473779 2: 89148 2:2416909 05 :343159 9: 140375 Y: 305073 01 :311807 Y: 305073 YY :305073 Z:1682082 (Other):296493 SEXEM STAT_CONJM STOCD SURF TACTM TPM 1:1429233 1:1028273 0 : 305073 4 :571276 11:1682082 1:1487709 2:1116524 2: 114351 10:1263064 3 :509245 12: 183924 2: 194373 Y: 305073 3: 274279 21: 545666 5 :424140 21: 554149 Y: 305073 4: 186866 22: 515399 Y :305073 22: 49403 Z: 863675 5: 251538 23: 152208 7 :285136 24: 18617 6: 690450 30: 69420 1 :267500 25: 57582 Y: 305073 (Other):488460 YY: 305073 TRANSM TRIRIS TYPC TYPL VOIT Z :863675 ZZZZZZ : 951742 1: 633682 1: 915178 0: 780747 5 :773301 931411 : 5167 2: 318107 2:1867706 1:1117288 6 :664544 920841 : 4799 3:1555868 3: 37919 2: 540114 Y :305073 910351 : 4770 4: 35025 4: 13999 3: 107608 2 :106503 920331 : 4197 5: 3075 5: 6442 X: 305073 1 : 53186 931071 : 4099 Y: 305073 6: 9586 (Other): 84548 (Other):1876056 WC Z:2850830 Mais attention, le problème ici est que cela nous donne des fréquences non pondérées pour lensemble de nos variables qualitatives, donc qui nont finalement pas grand sens. De plus, pour la seule variable numérique (hors pondération), ANEM, on voit que la moyenne est de 118,9 ans, ce qui signifierait quen moyenne lancienneté demménagement dans le logement en région Île-de-France est de 119 ans environ, hmhm !! On va voir que cela sexplique vraimsemblablement par des valeurs manquantes codées en 999. 3.1 Manipulation des variables qualitatives On peut dabord travailler sur les variables qualitatives qui correspondent ici à lessentiel de nos variables. Comme on le sait, on peut regarder les différents niveaux pour chacune dentre elles, avec la fonction levels(). Si on veut appliquer la fonction à lensemble de nos variables facteurs sans avoir donc à les indiquer une par une, on peut avoir recours à la fonction sapply() qui permet dappliquer la fonction indiquée entre parenthèses (ici levels()) à tous les éléments de notre table de données. # Pour info, ici cela donnerait cela : RP %&gt;% select(where(is.factor)) %&gt;% sapply(levels) # on peut même se passer de la sélection sur les variables : # RP %&gt;% sapply(levels) On peut ensuite vouloir retravailler les modalités de ces variables, car par exemple les modalités ne sont pas parlantes puisque nommées par des codes chiffres, ou parce que les modalités sont trop nombreuses et quon souhaiterait les rassembler pour une analyse ultérieure. Par exemple, si lon veut étudier la répartition des logements en Île-de-France selon leut type, on peut utiliser la variable TYPL : levels(RP$TYPL) [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; Mais le moins quon puisse dire cest que les 6 modalités de cette variable ne sont pas parlantes, on peut donc recoder les modalités de cette variable dans une étape DATA préalable comme ici ; on pourra bien sûr enchaîner plus tard les lignes de codes et réaliser cette étape dans une même procédure avec le tableau ou le graphique représentant cette variable. Commençons ici par létape DATA : # On cherche à quoi correspondent les modalités chiffrées de cette variable # dans le fichier &quot;meta&quot; meta %&gt;% filter(COD_VAR==&quot;TYPL&quot;) %&gt;% select(COD_MOD, LIB_MOD) # A tibble: 7 x 2 COD_MOD LIB_MOD &lt;fct&gt; &lt;fct&gt; 1 1 Maison 2 2 Appartement 3 3 Logement-foyer 4 4 Chambre d&#39;hôtel 5 5 Habitation de fortune 6 6 Pièce indépendante (ayant sa propre entrée) 7 Y Hors résidence principale # On recode à partir de ces libellés, tout en regroupant certaines modalités # qui sont très spécifiques et nous intéressent moins : RP &lt;- RP %&gt;% mutate(TYPL_moda =as.factor(case_when(TYPL == &quot;1&quot; ~ &quot;Maison&quot;, TYPL == &quot;2&quot; ~ &quot;Appartement&quot;, TYPL %in% c(&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;) ~ &quot;Autres&quot;))) levels(RP$TYPL_moda) [1] &quot;Appartement&quot; &quot;Autres&quot; &quot;Maison&quot; Si lon veut changer lordre des modalités, qui safficheront comme ci-dessus dans un tableau ou un graphique, on peut utiliser la fonction fct_relevel() du package forcats (à installer avant puis à appeler avant de lutiliser) : # install.package(&quot;forcats&quot;) library(forcats) RP &lt;- RP %&gt;% mutate(TYPL_moda = fct_relevel(TYPL_moda, c(&quot;Maison&quot;,&quot;Appartement&quot;,&quot;Autres&quot;))) levels(RP$TYPL_moda) [1] &quot;Maison&quot; &quot;Appartement&quot; &quot;Autres&quot; Plus largement, pour travailler sur les variables qualitatives en particulier lorsquelles sont en format facteur, le package forcats est très utile. Outre une fonction de transformation dune variable caractère en facteur (as_factor() proche de la version de baseR as.factor() utilisée juste au-dessus), elle contient plein dautres fonctions : fct_collapse() utilisée à la fin de la commande précédente pour renommer ou regrouper des modalités dune variable (au lieu de la double fonction as.factor() et case_when()) ; fct_relevel() utilisée également au-dessus pour trier les modalités comme on le souhaite ; fct_drop() pour enlever des niveaux de facteurs vides/sans effectifs ; fct_explicit_na() pour rendre les NA explicites en créant une modalité (missing) ; fct_reorder() et fct_reorder2() pour réordonner les modalités dune variable, très utile pour les graphiques car utilisables directement dans ggplot() ; fct_lump() pour regrouper les modalités les plus communes (ou au contraire les moins communes) en lui indiquant entre parenthèses le nombre n= de modalités souhaitées ou la proportion minimum souhaitée prop=, et en sélectionnant la variable avec la fonction pull() avant car elle doit être en format vecteur et non data.frame ; ou encore fct_recode() pour changer le niveau des facteurs ; fct_other() ; fct_infreq() et fct_inorder() ; etc. Un bon récapitulatif de ces fonctions est présenté ici. 3.2 Manipulation des variables quantitatives Comme nous lavons vu plus haut, il ny a que 2 variables quantitatives dans cette base et lune est la pondération, donc on va regarder plus précisément la variable ANEM. Cependant, celle-ci aussi est particulière car cest une variable numérique constituée dentiers naturels (et non de valeurs réelles) qui vont de 0 à 120, avec une modalité 999 ; dans le dictionnaire des variables (ou le fichier des métadonnées) disponible également sur le site de lInsee, on se rend compte que la variable a été pensée comme catégorielle avec des modalités dabord codées comme 000, 001, etc. Et quand on regarde à quoi correspond la modalité 999, on voit quelle permet de donner la situation dun logement ordinaire inoccupé. meta %&gt;% filter(COD_VAR==&quot;ANEM&quot;) %&gt;% select(COD_MOD, LIB_MOD) %&gt;% tail() # A tibble: 6 x 2 COD_MOD LIB_MOD &lt;fct&gt; &lt;fct&gt; 1 115 Depuis 115 ans 2 116 Depuis 116 ans 3 117 Depuis 117 ans 4 118 Depuis 118 ans 5 120 Depuis 120 ans 6 999 Logement ordinaire inoccupé On va recoder alors cette modalité comme des valeurs manquantes : dans R, ces valeurs sont notées NA. Cela nous permettra de la traiter comme une variable continue sur laquelle on pourra réaliser des statistiques sur sa distribution. Pour cela, dans une fonction mutate() combinée avec la fonction across() permettant de spécifier la variable sur laquelle on veut appliquer la transformation, on peut utiliser la fonction na_if qui permet de convertir des valeurs en NA. RP &lt;- RP %&gt;% mutate(across(ANEM, ~ na_if(ANEM, 999))) On peut alors regarder rapidement la distribution de cette variable. summary(RP$ANEM) Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s 0.00 3.00 8.00 13.49 20.00 117.00 305073 Si ce nest pas la variable continue idéale (car encore une fois elle nest pas à valeurs réelles), on va la prendre comme exemple ici pour étudier les différentes procédures que lon peut réaliser dans une étape Data wrangling sur de telles variables. 3.2.1 Détecter et visualiser les valeurs manquantes Même si linformation est donnée par la fonction summary() (mais qui nous donne dautres informations), on peut également compter le nombre de valeurs manquantes NA pour chacune des variables avec la fonction colSums(), pour les avoir en proportion du nombre total dobservations (lignes), on peut utiliser la fonction colMeans() ; sinon ; on peut utiliser la fonction summarise combinée avec across(where()), ) : colSums(is.na(RP)) COMMUNE ARM IRIS ACHL AEMM AEMMR AGEMEN8 0 0 0 0 0 0 0 ANEM ANEMR ASCEN BAIN BATI CATIRIS CATL 305073 0 0 0 0 0 0 CHAU CHFL CHOS CLIM CMBL CUIS DEROU 0 0 0 0 0 0 0 DIPLM EAU EGOUL ELEC EMPLM GARL HLML 0 0 0 0 0 0 0 ILETUDM ILTM IMMIM INAIM INEEM INP11M INP15M 0 0 0 0 0 0 0 INP17M INP19M INP24M INP3M INP60M INP65M INP5M 0 0 0 0 0 0 0 INP75M INPAM INPER INPER1 INPER2 INPOM INPSM 0 0 0 0 0 0 0 IPONDL IRANM METRODOM NBPI RECHM REGION SANI 0 0 0 0 0 0 0 SANIDOM SEXEM STAT_CONJM STOCD SURF TACTM TPM 0 0 0 0 0 0 0 TRANSM TRIRIS TYPC TYPL VOIT WC TYPL_moda 0 0 0 0 0 0 0 # Pour les avoir en proportion par rapport au nombre total d&#39;observations # et arrondies à 2 chiffres après la virgule : round(colMeans(is.na(RP)*100), 2) COMMUNE ARM IRIS ACHL AEMM AEMMR AGEMEN8 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ANEM ANEMR ASCEN BAIN BATI CATIRIS CATL 10.7 0.0 0.0 0.0 0.0 0.0 0.0 CHAU CHFL CHOS CLIM CMBL CUIS DEROU 0.0 0.0 0.0 0.0 0.0 0.0 0.0 DIPLM EAU EGOUL ELEC EMPLM GARL HLML 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ILETUDM ILTM IMMIM INAIM INEEM INP11M INP15M 0.0 0.0 0.0 0.0 0.0 0.0 0.0 INP17M INP19M INP24M INP3M INP60M INP65M INP5M 0.0 0.0 0.0 0.0 0.0 0.0 0.0 INP75M INPAM INPER INPER1 INPER2 INPOM INPSM 0.0 0.0 0.0 0.0 0.0 0.0 0.0 IPONDL IRANM METRODOM NBPI RECHM REGION SANI 0.0 0.0 0.0 0.0 0.0 0.0 0.0 SANIDOM SEXEM STAT_CONJM STOCD SURF TACTM TPM 0.0 0.0 0.0 0.0 0.0 0.0 0.0 TRANSM TRIRIS TYPC TYPL VOIT WC TYPL_moda 0.0 0.0 0.0 0.0 0.0 0.0 0.0 # Ou en langage tidyverse sur les seules variables numériques : RP %&gt;% summarise(across(where(is.numeric), ~ sum(is.na(.)))) # A tibble: 1 x 2 ANEM IPONDL &lt;int&gt; &lt;int&gt; 1 305073 0 Si votre base de données contient plusieurs variables avec un certain nombre de valeurs manquantes, il peut être intéressant den faire une analyse plus poussée. Différents packages existent pour détecter et visualiser les données manquantes. Lun dentre eux est le package naniar : quelques fonctions permettent dabord de décrire la base selon ses valeurs manquantes. library(naniar) # Ci-dessous : nombre de cellules du tableau ou de n_ij d&#39;une matrice # qui correspondent à des valeurs manquantes : n_miss(RP) [1] 305073 # Pour les avoir en proportion du nombre total de cellules du tableau # et non des seules lignes comme précédemment, # le résultat est déjà en pourcentage, sinon utiliser `prop_miss(RP)`) pct_miss(RP) [1] 0.1528743 # Ci-dessous : nombre de cellules du tableau ou de n_ij d&#39;une matrice # qui correspondent à des valeurs renseignées : n_complete(RP) [1] 199253027 #en proportion pct_complete(RP) [1] 99.84713 On peut ensuite visualiser le nombre de valeurs manquantes par variable, avec la fonction gg_miss_var() du même package. # 1er type de visualisation des valeurs manquantes RP %&gt;% gg_miss_var() On peut également demander dans gg_miss_var() à ce que les valeurs soient en pourcentage, avec largument show_pct=TRUE. On peut aussi réaliser des graphiques montrant le nombre de valeurs manquantes pour lensemble des variables numériques de la base, en fonction dune autre variable de nature factor, avec largument fct= dans gg_miss_fct(). Cela est intéressant pour voir si certaines valeurs manquantes des variables se retrouvent davantage dans des modalités précises dune autre variable. Par exemple, ici, selon le type de logement : RP %&gt;% select(where(is.numeric), TYPL_moda) %&gt;% gg_miss_fct(fct = TYPL_moda) On voit que les valeurs manquantes sont plus nombreuses en proportion pour la modalité 5 et sont moins nombreuses dans les modalités 1 et 3 ; elles ne se distribuent ainsi pas de manière uniforme selon la variable du type de logement. Plus généralement, la fonction gg_miss_upset() de ce même package naniar permet de visualiser des dépendances entre les valeurs manquantes des variables qui en ont, ici, cela ne marchera donc pas puisque nous navons quune variable avec valeurs manquantes. Voici le code néanmoins : RP %&gt;% select(where(is.numeric)) %&gt;% gg_miss_upset() library(VIM) RP %&gt;% select(where(is.numeric)) %&gt;% aggr(sortVar=TRUE, only.miss = TRUE) Enfin, il est possible dappliquer la fonction geom_miss_point() à une fonction ggplot, dans ce cas les valeurs manquantes de la ou des variables sont remplacées par des valeurs 10% plus basses que la valeur minimum observée des variables, et cela afin de les visualiser. Il existe bien sûr bien dautres packages, comme funModeling, Amelia et sa fonction missmap(), ou encore visdat et sa fonction vis_miss(). Enfin, dautres packages comme VIM ou MICE permettent, non seulement de visualiser ces valeurs manquantes, mais également de leur appliquer des techniques pour les gérer, cest ce que lon va voir maintenant en résumé. 3.2.2 Gérer les valeurs manquantes Il est bien de connaître le nombre et la proportion de valeurs manquantes dans nos données, comment ces dernières se répartissent entre elles, etc., mais il faut aussi comprendre quel impact elles peuvent avoir sur des analyses statistiques, de régressions ou autres algorithmes. Dans une base de données tirée dune enquête, les valeurs manquantes peuvent provenir dune non-réponse de la part de lenquêté (que ce soit un individu ou une entreprise), cette non-réponse pouvant être totale (on a aucune donnée pour cet enquêté alors quil fait partie de léchantillon) ou partielle (on a une partie des réponses mais pas à toutes les questions et donc des variables parfois avec des valeurs manquantes) ; ou bien encore elles peuvent être dues à une mauvaise saisie de linformation par lenquêteur. La pondération, si elle est présente dans une enquête, peut permettre de corriger cette non-réponse totale, voire partielle. Les conséquences des valeurs manquantes dans une base de données dépendent de plusieurs choses : on doit dabord se demander si linformation perdue aurait été pertinente et/ou aurait apporté un élément particulier/supplémentaire. Ensuite, la perte éventuelle dinformation est-elle importante, en nombre/en proportion. Et enfin (et surtout), peut-elle créer un biais lors de lestimation et précision du phénomène que lon souhaite observer, décrire, analyser, etc. Selon limportance de ces conséquences, il faut traiter ces valeurs manquantes, cest-à-dire utiliser une procédure la plus adaptée possible selon le potentiel biais repéré. Traditionnellement dans la littérature, on distingue 3 types de valeurs manquantes : valeur manquante entièrement due au hasard (MCAR pour Missing completely at random) : il ny a pas de lien entre la valeur manquante pour une variable donnée et les autres variables, dit autrement la probabilité pour une variable quelle ait une valeur manquante est constante dans les données, elle ne diffère pas selon dautres caractéristiques des individus ; valeur manquante due au hasard (MAR pour Missing at random) : il y a un lien entre la valeur manquante pour une variable donnée et les valeurs observées dautres variables, cest-à-dire que la probabilité pour une variable quelle ait une valeur manquante dépend dautres variables (de leurs valeurs observées), elle ne sera donc pas la même selon les individus, cest ce quon essayait de regarder lorsquon a utilisé plus haut la fonction gg_miss_fct(fct=) ; valeur ne manquant pas au hasard (NMAR pour Non missing at random) : il y a un lien entre la valeur manquante pour une variable et les valeurs manquantes/non observées dautres variables. Ce sont celles qui risquent dentraîner des biais importants si on ne les traite pas, cest ce quon essayait de regarder plus haut également avec la fonction gg_miss_upset() cette fois. Comment alors les gérer ? En pratique, il est dusage lorsque la proportion de valeurs manquantes ne dépasse pas 5% des données de ne rien faire de particulier ou simplement de les supprimer (vous pouvez pour la savoir utiliser les premières fonctions du package naniar présentées précédemment). Sinon, on essaye dappliquer plusieurs méthodes, simples ou plus complexes. Dans le cas de valeurs manquantes entièrement dues au hasard (MCAR) et/ou dune faible proportion des valeurs manquantes dans le total de la table de données, on peut décider de supprimer toutes les lignes qui contiennent au moins une valeur manquante, afin davoir une table de données complètes, on peut utiliser la fonction na.omit() ou complete.cases() ; attention à ne pas remplacer votre table de données initiale en réalisant cette procédure. RP_sansNA &lt;- na.omit(RP) # OU : # RP_sansNA &lt;- RP[complete.cases(RP), ] # Pour vérification : colSums(is.na(RP_sansNA)) COMMUNE ARM IRIS ACHL AEMM AEMMR AGEMEN8 0 0 0 0 0 0 0 ANEM ANEMR ASCEN BAIN BATI CATIRIS CATL 0 0 0 0 0 0 0 CHAU CHFL CHOS CLIM CMBL CUIS DEROU 0 0 0 0 0 0 0 DIPLM EAU EGOUL ELEC EMPLM GARL HLML 0 0 0 0 0 0 0 ILETUDM ILTM IMMIM INAIM INEEM INP11M INP15M 0 0 0 0 0 0 0 INP17M INP19M INP24M INP3M INP60M INP65M INP5M 0 0 0 0 0 0 0 INP75M INPAM INPER INPER1 INPER2 INPOM INPSM 0 0 0 0 0 0 0 IPONDL IRANM METRODOM NBPI RECHM REGION SANI 0 0 0 0 0 0 0 SANIDOM SEXEM STAT_CONJM STOCD SURF TACTM TPM 0 0 0 0 0 0 0 TRANSM TRIRIS TYPC TYPL VOIT WC TYPL_moda 0 0 0 0 0 0 0 On se retrouve alors avec une table de 2 545 757 observations (lignes), on a donc perdu 305 073 observations, soit 10.70% des observations de la table initiale, ce qui est cohérent avec ce quon avait retiré de notre première analyse de détection des valeurs manquantes. Des techniques dimputation simple peuvent également être utilisées. On peut par exemple remplacer les valeurs manquantes dune variable quantitative par sa moyenne ou sa médiane, pour cela on peut utiliser la fonction replace_na() du package tidyr, ou impute() du package Hmisc, ou encore na.aggregate() du package zoo On donne ainsi une valeur artificielle pour remplacer la valeur manquante. Dans le cas de variables qualitatives, on peut, de même, imputer la modalité dominante (avec la fonction mode() du package Hmisc ; ou avec largument mode= du package zoo). Par exemple, voici les codes pour remplacer les valeurs manquantes de la variable ANEM par sa moyenne (ici on ne fait pas tourner ces codes) : # Comme les valeurs de la variable &#39;ANEM&#39; sont des entiers naturels, # il faut arrondir la moyenne à l&#39;unité, sinon la fonction renvoie # une erreur RP %&gt;% mutate(ANEM_bis = replace_na(ANEM, round(mean(ANEM, na.rm=TRUE), 0))) %&gt;% select(ANEM, ANEM_bis) library(Hmisc) RP$ANEM_bis &lt;- with(RP, impute(ANEM, mean)) library(zoo) RP$ANEM_bis &lt;- na.aggregate(RP$ANEM, FUN = mean) On peut néanmoins réaliser ce type dimputation simple de manière un petit peu plus subtile. Par exemple, si la moyenne de la variable diffère sensiblement selon une autre variable (catégorielle), dans ce cas, on va plutôt remplacer les valeurs manquantes de la variable selon la moyenne associée à chaque modalité de cette autre variable en ajoutant un group_by() avant la fonction mutate() si on utilise la fonction replace_na() comme dans lexemple précédent. Si on ne veut pas supprimer ces lignes dobservations et perdre ainsi dautres informations (celles des variables pour lesquelles la valeur était renseignée pour cette même observation), on peut simplement créer une variable indicatrice de valeur manquante, remplacer les NA par 999 comme dans notre base de données actuelle pour des variables quantitatives, ou par une modalité Manquant ou Missing pour des variables qualitatives. Plusieurs autres méthodes existent également dans le cas de valeurs manquantes dues au hasard (MAR), en voici la liste pour information et sans prétention dexhaustivité : - analyse pondérée pour des valeurs MAR qui consiste à calculer la probabilité quune observation soit complète et ensuite à affecter à chacune des observations complètes, un poids inversement proportionnel à cette probabilité ; - imputation de la dernière observation pour des données temporelles ; - imputation hot-deck qui consiste à remplacer la valeur manquante par une valeur observée chez un autre individu ayant les mêmes caractéristiques, ou cold-deck (même démarche que précédement, sauf que la valeur imputée vient dune autre source) ; - imputation par le plus proche voisin en utilisant une fonction de distance basée sur plusieurs autres variables/caractéristiques de lindividu ; - imputation par un modèle de régression où lon va remplacer la valeur manquante par une valeur prédite obtenue par régression sur données complètes de la variable comportant des valeurs manquantes. Il y a aussi des techniques plus complextes dimputation multiple qui consiste à créer plusieurs valeurs possibles pour une valeur manquante dune variable, cela peut être adaptée là aussi lorsque les valeurs manquantes sont dues au hasard (MAR). Vous trouverez de multiples ressources sur internet dans des ouvrages libres daccès, ou vous pouvez aller voir un des chapitres de louvrage principal support du cours (Husson, 2018), avec des exemples dutilisation. 3.2.3 Détecter et visualiser les valeurs aberrantes Pour cela, on va utiliser une autre base, téléchargée sur opendatasoft à partir de la fonction créée lors de la séance 1 de M. Grasland. Cette base dont le nom est aides-entreprises-covid-19-france renseigne du nombre et du montant des aides financières accordées aux entreprises françaises durant la crise du covid_19, selon en particulier le secteur dactivité et la localisation géographique. # Rappel fonction (soit vous l&#39;avez encore dans votre environnement, soit # vous l&#39;avez sauvegardé et dans ce cas il faut l&#39;appeler, soit vous devez # refaire tourner les lignes de codes suivantes...) get_data &lt;- function(idtab, rows, start) { url &lt;- paste0(&quot;https://public.opendatasoft.com/api/records/1.0/search/?dataset=&quot;,idtab,&quot;&amp;q=&amp;rows=&quot;,rows,&quot;&amp;start=&quot;,start,sep=&quot;&quot;) x &lt;- GET(url) y &lt;- fromJSON(rawToChar((x$content))) don &lt;- y$records$fields return(don) } library(jsonlite) library(httr) dt_aidesCovid &lt;- get_data(idtab = &quot;aides-entreprises-covid-19-france&quot;, rows=2000, start=0) dt_aidesCovid %&gt;% glimpse() Rows: 1,680 Columns: 13 $ reg_code &lt;int&gt; 84, 84, 84, 84, 84, 27, 27, 27, 27, 24, 24, 24~ $ geo_point_2d &lt;list&gt; &lt;46.09983, 5.34885&gt;, &lt;45.728000, 4.164813&gt;, &lt;~ $ naf_section_name &lt;chr&gt; &quot;Commerce&quot;, &quot;Industrie manufacturière&quot;, &quot;Const~ $ nombre_entreprises &lt;int&gt; 2602, 1042, 3034, 6577, 3021, 61, 268, 45, 233~ $ plan &lt;chr&gt; &quot;Fonds de solidarité&quot;, &quot;Fonds de solidarité&quot;, ~ $ financial_support_count &lt;int&gt; 10424, 3820, 8936, 19967, 28020, 366, 2212, 19~ $ reg_name &lt;chr&gt; &quot;Auvergne-Rhône-Alpes&quot;, &quot;Auvergne-Rhône-Alpes&quot;~ $ naf_section_code &lt;chr&gt; &quot;G&quot;, &quot;C&quot;, &quot;F&quot;, &quot;F&quot;, &quot;I&quot;, &quot;J&quot;, &quot;R&quot;, &quot;K&quot;, &quot;L&quot;, &quot;~ $ total_meuros &lt;dbl&gt; 31.889084, 9.551646, 13.922570, 33.039981, 247~ $ dep_name &lt;chr&gt; &quot;Ain&quot;, &quot;Loire&quot;, &quot;Loire&quot;, &quot;Rhône&quot;, &quot;Savoie&quot;, &quot;N~ $ iso3_code &lt;chr&gt; &quot;FXX&quot;, &quot;FXX&quot;, &quot;FXX&quot;, &quot;FXX&quot;, &quot;FXX&quot;, &quot;FXX&quot;, &quot;FXX~ $ dep_code &lt;chr&gt; &quot;01&quot;, &quot;42&quot;, &quot;42&quot;, &quot;69&quot;, &quot;73&quot;, &quot;58&quot;, &quot;58&quot;, &quot;89&quot;~ $ total &lt;dbl&gt; 31889084, 9551646, 13922570, 33039981, 2478684~ dt_aidesCovid %&gt;% head() %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #iwqijrjvro .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #iwqijrjvro .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iwqijrjvro .gt_caption { padding-top: 4px; padding-bottom: 4px; } #iwqijrjvro .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #iwqijrjvro .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #iwqijrjvro .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iwqijrjvro .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #iwqijrjvro .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #iwqijrjvro .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #iwqijrjvro .gt_column_spanner_outer:first-child { padding-left: 0; } #iwqijrjvro .gt_column_spanner_outer:last-child { padding-right: 0; } #iwqijrjvro .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #iwqijrjvro .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #iwqijrjvro .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #iwqijrjvro .gt_from_md > :first-child { margin-top: 0; } #iwqijrjvro .gt_from_md > :last-child { margin-bottom: 0; } #iwqijrjvro .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #iwqijrjvro .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #iwqijrjvro .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #iwqijrjvro .gt_row_group_first td { border-top-width: 2px; } #iwqijrjvro .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iwqijrjvro .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #iwqijrjvro .gt_first_summary_row.thick { border-top-width: 2px; } #iwqijrjvro .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iwqijrjvro .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #iwqijrjvro .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #iwqijrjvro .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #iwqijrjvro .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #iwqijrjvro .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iwqijrjvro .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #iwqijrjvro .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #iwqijrjvro .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #iwqijrjvro .gt_left { text-align: left; } #iwqijrjvro .gt_center { text-align: center; } #iwqijrjvro .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #iwqijrjvro .gt_font_normal { font-weight: normal; } #iwqijrjvro .gt_font_bold { font-weight: bold; } #iwqijrjvro .gt_font_italic { font-style: italic; } #iwqijrjvro .gt_super { font-size: 65%; } #iwqijrjvro .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #iwqijrjvro .gt_asterisk { font-size: 100%; vertical-align: 0; } #iwqijrjvro .gt_indent_1 { text-indent: 5px; } #iwqijrjvro .gt_indent_2 { text-indent: 10px; } #iwqijrjvro .gt_indent_3 { text-indent: 15px; } #iwqijrjvro .gt_indent_4 { text-indent: 20px; } #iwqijrjvro .gt_indent_5 { text-indent: 25px; } reg_code geo_point_2d naf_section_name nombre_entreprises plan financial_support_count reg_name naf_section_code total_meuros dep_name iso3_code dep_code total 84 46.09983, 5.34885 Commerce 2602 Fonds de solidarité 10424 Auvergne-Rhône-Alpes G 31.889084 Ain FXX 01 31889084 84 45.728000, 4.164813 Industrie manufacturière 1042 Fonds de solidarité 3820 Auvergne-Rhône-Alpes C 9.551646 Loire FXX 42 9551646 84 45.728000, 4.164813 Construction 3034 Fonds de solidarité 8936 Auvergne-Rhône-Alpes F 13.922570 Loire FXX 42 13922570 84 45.871312, 4.640724 Construction 6577 Fonds de solidarité 19967 Auvergne-Rhône-Alpes F 33.039981 Rhône FXX 69 33039981 84 45.477437, 6.442872 Hébergement et restauration 3021 Fonds de solidarité 28020 Auvergne-Rhône-Alpes I 247.868466 Savoie FXX 73 247868466 27 47.115383, 3.504115 Information et communication 61 Fonds de solidarité 366 Bourgogne-Franche-Comté J 0.736895 Nièvre FXX 58 736895 Avant tout, comme indiqué dans la section précédente (2. Manipulation de la base), il faut comprendre quel est le format de ces données. Ici, les données sont micro-agrégées, cest-à-dire quune observation est le croisement dun secteur et dun département ; il faut donc sommer les variables pour avoir une idée des montants de ces aides financières. Par exemple, on somme dans le code suivant le montant total des aides en euros et milliers deuros, puis le nombre total des aides et enfin le nombre total dentreprise concernées par ces aides ; la fonction fmt_number() ajoutée à la fin du code permet simplement davoir une séparation visuelle par milliers (un blanc ici ; le format chez les anglo-saxons étant une virgule), puisque nous avons ici des montants très importants ! dt_aidesCovid %&gt;% summarise(total_aides=sum(total), total_aides_meuros=sum(total_meuros), nb_totales_aides=sum(financial_support_count), nb_totales_entre=sum(nombre_entreprises)) %&gt;% gt() %&gt;% fmt_number(columns = c(&quot;total_aides&quot;, &quot;total_aides_meuros&quot;, &quot;nb_totales_aides&quot;, &quot;nb_totales_entre&quot;), sep_mark = &quot; &quot;, decimals = 0) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #sjkocuvkgk .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #sjkocuvkgk .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #sjkocuvkgk .gt_caption { padding-top: 4px; padding-bottom: 4px; } #sjkocuvkgk .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #sjkocuvkgk .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #sjkocuvkgk .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #sjkocuvkgk .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #sjkocuvkgk .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #sjkocuvkgk .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #sjkocuvkgk .gt_column_spanner_outer:first-child { padding-left: 0; } #sjkocuvkgk .gt_column_spanner_outer:last-child { padding-right: 0; } #sjkocuvkgk .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #sjkocuvkgk .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #sjkocuvkgk .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #sjkocuvkgk .gt_from_md > :first-child { margin-top: 0; } #sjkocuvkgk .gt_from_md > :last-child { margin-bottom: 0; } #sjkocuvkgk .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #sjkocuvkgk .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #sjkocuvkgk .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #sjkocuvkgk .gt_row_group_first td { border-top-width: 2px; } #sjkocuvkgk .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #sjkocuvkgk .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #sjkocuvkgk .gt_first_summary_row.thick { border-top-width: 2px; } #sjkocuvkgk .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #sjkocuvkgk .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #sjkocuvkgk .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #sjkocuvkgk .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #sjkocuvkgk .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #sjkocuvkgk .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #sjkocuvkgk .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #sjkocuvkgk .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #sjkocuvkgk .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #sjkocuvkgk .gt_left { text-align: left; } #sjkocuvkgk .gt_center { text-align: center; } #sjkocuvkgk .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #sjkocuvkgk .gt_font_normal { font-weight: normal; } #sjkocuvkgk .gt_font_bold { font-weight: bold; } #sjkocuvkgk .gt_font_italic { font-style: italic; } #sjkocuvkgk .gt_super { font-size: 65%; } #sjkocuvkgk .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #sjkocuvkgk .gt_asterisk { font-size: 100%; vertical-align: 0; } #sjkocuvkgk .gt_indent_1 { text-indent: 5px; } #sjkocuvkgk .gt_indent_2 { text-indent: 10px; } #sjkocuvkgk .gt_indent_3 { text-indent: 15px; } #sjkocuvkgk .gt_indent_4 { text-indent: 20px; } #sjkocuvkgk .gt_indent_5 { text-indent: 25px; } total_aides total_aides_meuros nb_totales_aides nb_totales_entre 35 490 463 923 35 490 10 531 765 2 016 218 On veut plus précisément étudier dans cette sous-section les possibles valeurs aberrantes. On peut alors afficher les valeurs maximum pour chacune de ces variables. dt_aidesCovid %&gt;% summarise(aides_max=max(total), aides_meuros_max=max(total_meuros), nb_max_aides=max(financial_support_count), nb_max_entre=max(nombre_entreprises)) %&gt;% gt() %&gt;% fmt_number(columns = 1:4, sep_mark = &quot; &quot;, decimals = 0) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #wpiltishua .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #wpiltishua .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wpiltishua .gt_caption { padding-top: 4px; padding-bottom: 4px; } #wpiltishua .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #wpiltishua .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #wpiltishua .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wpiltishua .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wpiltishua .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #wpiltishua .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #wpiltishua .gt_column_spanner_outer:first-child { padding-left: 0; } #wpiltishua .gt_column_spanner_outer:last-child { padding-right: 0; } #wpiltishua .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #wpiltishua .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #wpiltishua .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #wpiltishua .gt_from_md > :first-child { margin-top: 0; } #wpiltishua .gt_from_md > :last-child { margin-bottom: 0; } #wpiltishua .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #wpiltishua .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #wpiltishua .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #wpiltishua .gt_row_group_first td { border-top-width: 2px; } #wpiltishua .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wpiltishua .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #wpiltishua .gt_first_summary_row.thick { border-top-width: 2px; } #wpiltishua .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wpiltishua .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wpiltishua .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #wpiltishua .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #wpiltishua .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wpiltishua .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wpiltishua .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #wpiltishua .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wpiltishua .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #wpiltishua .gt_left { text-align: left; } #wpiltishua .gt_center { text-align: center; } #wpiltishua .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #wpiltishua .gt_font_normal { font-weight: normal; } #wpiltishua .gt_font_bold { font-weight: bold; } #wpiltishua .gt_font_italic { font-style: italic; } #wpiltishua .gt_super { font-size: 65%; } #wpiltishua .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #wpiltishua .gt_asterisk { font-size: 100%; vertical-align: 0; } #wpiltishua .gt_indent_1 { text-indent: 5px; } #wpiltishua .gt_indent_2 { text-indent: 10px; } #wpiltishua .gt_indent_3 { text-indent: 15px; } #wpiltishua .gt_indent_4 { text-indent: 20px; } #wpiltishua .gt_indent_5 { text-indent: 25px; } aides_max aides_meuros_max nb_max_aides nb_max_entre 1 649 963 187 1 650 184 009 35 383 Ou faire quelques graphs sur la variable du montant total des aides en milliers deuros total_meuros pour mieux visualiser de possibles valeurs aberrantes, de manière générale avec un histogramme, ou ventilées par région avec des boîtes à moustache : dt_aidesCovid %&gt;% ggplot() + aes(x=total_meuros) + geom_histogram(bins=150) dt_aidesCovid %&gt;% ggplot() + aes(x = reg_name, y = total_meuros) + geom_boxplot() + coord_flip() On voit en effet quelques points qui semblent être des valeurs aberrantes ou outliers ; parfois, cest à tel point quon narrive même pas à distinguer les différentes valeurs de la distribution marquées par le Boxplot et par conséquent les boxplot sont ramassées. Pour rappel, dans un boxplot, par défaut un point est affiché comme aberrant sil est en dehors de lintervalle suivant : \\(I=[Q_{1}1.5×IQR ; Q_{3}+1.5×IQR]\\), IQR étant lintervalle interquartile donc la différence entre Q1 et Q3. Mais sagit-il de vraies valeurs aberrantes ? Combien dobservations concernent-elles ? La fonction boxplot.stats() permet de récupérer les valeurs des observations indiquées comme aberrantes, comme cela on peut créer ensuite une variable indiquant si oui ou non lobservation a une valeur aberrante. Faisons-cela pour la variable total_meuros par exemple. # On récupère les valeurs de la partie &#39;out&#39; des sorties de la fonction # &#39;boxplot.stats&#39;, qui correspondent aux valeurs de tout point de données # qui se situe au-delà des extrêmes de la boxplot val_outliers &lt;- boxplot.stats(dt_aidesCovid$total_meuros)$out # On crée une variable dans notre table d&#39;&quot;identification&quot; de ces outliers # avec comme modalité &quot;vraie&quot; si l&#39;observation a une valeur &quot;outliers&quot;, # sinon &quot;Faux&quot; dt_aidesCovid &lt;- dt_aidesCovid %&gt;% mutate(total_meuros_outliers = case_when(total_meuros %in% c(val_outliers) ~ &quot;Vrai&quot;, TRUE ~ &quot;Faux&quot;)) # Puis on regarde la répartition avec la fonction `tabyl()` du package `janitor()` library(janitor) dt_aidesCovid %&gt;% tabyl(total_meuros_outliers) %&gt;% adorn_pct_formatting() %&gt;% adorn_totals(&quot;row&quot;) # A tibble: 3 x 3 total_meuros_outliers n percent &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; 1 Faux 1484 88.3% 2 Vrai 196 11.7% 3 Total 1680 - On y lit que pour cette variable, il y aurait près de 11,7% de valeurs aberrantes telles quindiquées par le boxplot, cela fait beaucoup ! On peut regarder plus précisément à quelles observations elles correspondent et à quel montant. dt_aidesCovid %&gt;% filter(total_meuros_outliers==&#39;Vrai&#39;) %&gt;% select(total_meuros, naf_section_name, dep_name) %&gt;% arrange(total_meuros) %&gt;% head(10) %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #guholryisc .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #guholryisc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #guholryisc .gt_caption { padding-top: 4px; padding-bottom: 4px; } #guholryisc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #guholryisc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #guholryisc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #guholryisc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #guholryisc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #guholryisc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #guholryisc .gt_column_spanner_outer:first-child { padding-left: 0; } #guholryisc .gt_column_spanner_outer:last-child { padding-right: 0; } #guholryisc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #guholryisc .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #guholryisc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #guholryisc .gt_from_md > :first-child { margin-top: 0; } #guholryisc .gt_from_md > :last-child { margin-bottom: 0; } #guholryisc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #guholryisc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #guholryisc .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #guholryisc .gt_row_group_first td { border-top-width: 2px; } #guholryisc .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #guholryisc .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #guholryisc .gt_first_summary_row.thick { border-top-width: 2px; } #guholryisc .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #guholryisc .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #guholryisc .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #guholryisc .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #guholryisc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #guholryisc .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #guholryisc .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #guholryisc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #guholryisc .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #guholryisc .gt_left { text-align: left; } #guholryisc .gt_center { text-align: center; } #guholryisc .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #guholryisc .gt_font_normal { font-weight: normal; } #guholryisc .gt_font_bold { font-weight: bold; } #guholryisc .gt_font_italic { font-style: italic; } #guholryisc .gt_super { font-size: 65%; } #guholryisc .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #guholryisc .gt_asterisk { font-size: 100%; vertical-align: 0; } #guholryisc .gt_indent_1 { text-indent: 5px; } #guholryisc .gt_indent_2 { text-indent: 10px; } #guholryisc .gt_indent_3 { text-indent: 15px; } #guholryisc .gt_indent_4 { text-indent: 20px; } #guholryisc .gt_indent_5 { text-indent: 25px; } total_meuros naf_section_name dep_name 41.41726 Transports et entreposage Nord 41.54758 Commerce Finistère 41.70506 Activités spécialisées, scientifiques et techniques Bas-Rhin 41.74750 Hébergement et restauration Aube 42.43167 Hébergement et restauration Lot 42.45356 Hébergement et restauration Eure-et-Loir 42.94316 Hébergement et restauration Corrèze 43.24990 Hébergement et restauration Haute-Loire 43.32271 Commerce Morbihan 43.44017 Commerce Calvados OK on voit donc que cette procédure attribue des valeurs aberrantes pour des valeurs au-dessus de 41.41726 et donc à des observations qui seraient intéressants néanmoins à conserver ; attention par conséquent à identifier les valeurs dites aberrantes, éventuellement avec plusieurs méthodes (cf. ci-dessous) et surtout à les comprendre, il ne sagit pas juste de les identifier pour les exclure ensuite des analyses. Il existe en effet bien dautres méthodes (méthode basée sur les percentiles ; méthode de Hampel), ainsi que des tests : par exemple, le package outliers vous permet de tester si une valeur (max ou min) est bien une valeur aberrante avec la fonction grubbs.test() (attention bis : à utiliser avec grande précaution et beaucoup de parcimonie), ou avec le package EnvStats et la fonction rosnerTest() pour détecter plusieurs outliers à la fois. Pour gérer ces variables aberrantes, on peut les supprimer bien sûr si lon est sûr que la valeur de la variable nest pas normale, par exemple si on a une variable de salaire avec des modalités inférieures à 0, oui dans ce cas ce sont des mauvais outliers (et dailleurs peut-être même pas identifiés comme tel statistiquement) et on peut les supprimer ; de même pour des variables de résultats économiques, on va souvent élaguer la distribution en retirant les 1% (par exemple) du bas et du haut de la distribution pour supprimer des potentiels outliers. Sinon, on les isole en créant une variable dichotomique 0/1 ou Faux/Vrai ; ou on crée une variable qualitative avec plusieurs catégories. Dans les graphiques, en particulier les boîtes à moustache, on peut les supprimer avec loption outlier.shape = NA et mettre ensuite une échelle plus réduite (avec ylim=c(0,175)) pour que le graphique soit plus lisible, mais il faut alors bien préciser dans la légende que certaines valeurs ne sont pas visibles sur le graphique car retirées. dt_aidesCovid %&gt;% ggplot() + aes(x = reg_name, y = total_meuros) + geom_boxplot(outlier.shape = NA) + coord_flip(ylim = c(0,175)) + labs(title = &quot;Distribution des aides financières en millions d&#39;euros, selon la région&quot;, y=&quot;&quot;, x=&quot;Région&quot;, caption=&quot;Rq : les valeurs au-delà de 175 millions d&#39;euros ne sont pas affichées sur le graphique.&quot;) + theme(plot.caption = element_text(hjust=0)) 3.2.4 Découper en classes une variable quantitative On peut enfin découper en classes une variable quantitative et en faire donc une variable qualitative. On utilise pour cela la fonction cut() du langage de base de R. On peut par exemple découper la variable selon les principaux indicateurs de la distribution. library(rstatix) dt_aidesCovid %&gt;% get_summary_stats(total_meuros) %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #udnodkxgtv .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #udnodkxgtv .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #udnodkxgtv .gt_caption { padding-top: 4px; padding-bottom: 4px; } #udnodkxgtv .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #udnodkxgtv .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #udnodkxgtv .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #udnodkxgtv .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #udnodkxgtv .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #udnodkxgtv .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #udnodkxgtv .gt_column_spanner_outer:first-child { padding-left: 0; } #udnodkxgtv .gt_column_spanner_outer:last-child { padding-right: 0; } #udnodkxgtv .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #udnodkxgtv .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #udnodkxgtv .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #udnodkxgtv .gt_from_md > :first-child { margin-top: 0; } #udnodkxgtv .gt_from_md > :last-child { margin-bottom: 0; } #udnodkxgtv .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #udnodkxgtv .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #udnodkxgtv .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #udnodkxgtv .gt_row_group_first td { border-top-width: 2px; } #udnodkxgtv .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #udnodkxgtv .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #udnodkxgtv .gt_first_summary_row.thick { border-top-width: 2px; } #udnodkxgtv .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #udnodkxgtv .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #udnodkxgtv .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #udnodkxgtv .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #udnodkxgtv .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #udnodkxgtv .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #udnodkxgtv .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #udnodkxgtv .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #udnodkxgtv .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #udnodkxgtv .gt_left { text-align: left; } #udnodkxgtv .gt_center { text-align: center; } #udnodkxgtv .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #udnodkxgtv .gt_font_normal { font-weight: normal; } #udnodkxgtv .gt_font_bold { font-weight: bold; } #udnodkxgtv .gt_font_italic { font-style: italic; } #udnodkxgtv .gt_super { font-size: 65%; } #udnodkxgtv .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #udnodkxgtv .gt_asterisk { font-size: 100%; vertical-align: 0; } #udnodkxgtv .gt_indent_1 { text-indent: 5px; } #udnodkxgtv .gt_indent_2 { text-indent: 10px; } #udnodkxgtv .gt_indent_3 { text-indent: 15px; } #udnodkxgtv .gt_indent_4 { text-indent: 20px; } #udnodkxgtv .gt_indent_5 { text-indent: 25px; } variable n min max median q1 q3 iqr mad mean sd se ci total_meuros 1680 0.006 1649.963 6.001 1.828 17.644 15.815 7.56 21.125 60.662 1.48 2.903 dt_aidesCovid$total_meuros_cat &lt;- cut(dt_aidesCovid$total_meuros, breaks = c(0, quantile(dt_aidesCovid$total_meuros,0.25), mean(dt_aidesCovid$total_meuros), max(dt_aidesCovid$total_meuros))) dt_aidesCovid %&gt;% tabyl(total_meuros_cat) %&gt;% adorn_pct_formatting() %&gt;% adorn_totals(&quot;row&quot;) %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #rprkxlyypo .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #rprkxlyypo .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #rprkxlyypo .gt_caption { padding-top: 4px; padding-bottom: 4px; } #rprkxlyypo .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #rprkxlyypo .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #rprkxlyypo .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rprkxlyypo .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #rprkxlyypo .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #rprkxlyypo .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #rprkxlyypo .gt_column_spanner_outer:first-child { padding-left: 0; } #rprkxlyypo .gt_column_spanner_outer:last-child { padding-right: 0; } #rprkxlyypo .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #rprkxlyypo .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #rprkxlyypo .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #rprkxlyypo .gt_from_md > :first-child { margin-top: 0; } #rprkxlyypo .gt_from_md > :last-child { margin-bottom: 0; } #rprkxlyypo .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #rprkxlyypo .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #rprkxlyypo .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #rprkxlyypo .gt_row_group_first td { border-top-width: 2px; } #rprkxlyypo .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #rprkxlyypo .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #rprkxlyypo .gt_first_summary_row.thick { border-top-width: 2px; } #rprkxlyypo .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rprkxlyypo .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #rprkxlyypo .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #rprkxlyypo .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #rprkxlyypo .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rprkxlyypo .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #rprkxlyypo .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #rprkxlyypo .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #rprkxlyypo .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #rprkxlyypo .gt_left { text-align: left; } #rprkxlyypo .gt_center { text-align: center; } #rprkxlyypo .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #rprkxlyypo .gt_font_normal { font-weight: normal; } #rprkxlyypo .gt_font_bold { font-weight: bold; } #rprkxlyypo .gt_font_italic { font-style: italic; } #rprkxlyypo .gt_super { font-size: 65%; } #rprkxlyypo .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #rprkxlyypo .gt_asterisk { font-size: 100%; vertical-align: 0; } #rprkxlyypo .gt_indent_1 { text-indent: 5px; } #rprkxlyypo .gt_indent_2 { text-indent: 10px; } #rprkxlyypo .gt_indent_3 { text-indent: 15px; } #rprkxlyypo .gt_indent_4 { text-indent: 20px; } #rprkxlyypo .gt_indent_5 { text-indent: 25px; } total_meuros_cat n percent (0,1.83] 420 25.0% (1.83,21.1] 901 53.6% (21.1,1.65e+03] 359 21.4% Total 1680 - On a une classe majoritaire (du Q1 à la moyenne), mais cela nous permet de distinguer 2 classes pour lesquelles le montant des aides financières est très faible ou au contraire très élevé. À noter que si la variable quantitative en question a des valeurs manquantes, il faudra utiliser la fonction fancycut() ou wafflecut() du package fancycut, linconvénient est que cela nous oblige à indiquer les valeurs des différents indicateurs de la distribution. Pour trouver le même résultat que précédemment, le code serait alors le suivant : library(fancycut) dt_aidesCovid$total_meuros_cat1 &lt;- fancycut(dt_aidesCovid$total_meuros, &#39;1&#39;=&#39;(0,1.83]&#39;, &#39;2&#39;=&#39;(1.83,21]&#39;, &#39;3&#39;=&#39;(21,1.64e+03]&#39;, na.bucket=&#39;Manquant&#39;) dt_aidesCovid %&gt;% tabyl(total_meuros_cat1) %&gt;% adorn_pct_formatting() %&gt;% adorn_totals(&quot;row&quot;) %&gt;% gt() "],["04-Récapitulatif.html", "Section 4 Récapitulatig séance 1 - Data Wrangling 4.1 Ce quon a appris 4.2 Enregistrement des tables", " Section 4 Récapitulatig séance 1 - Data Wrangling 4.1 Ce quon a appris Cette séance sur la préparation et nettoyage dune base de données - phase appelée aussi Data Wrangling - nous a permis dapprendre à : charger des bases de données, y compris dans le cas dun fichier lourd avec la fonction fread() du package data.table ; repérer les informations intéressantes, notamment en allant voir le fichier annexe, celui des métadonneés ; mais ce type de fichier nest pas toujours disponible, si vous avez des données dune entreprise, peut-être que linformation décrivant cette base est plus informelles, ou même si vous aspirez des données via le web alors vous naurez pas du tout dinformation décrivant la base : manipuler la base de données : en identifiant dabord le format des données, en sélectionnant un champ différent (moins de lignes/dobservation), et/ou des variables spécifiques (moins de colonnes), avec les fonctions filter(), select(), subset(), pivot_wider(), pivot_longer(), unique(), arrange(), etc.; manipuler des variables : en identifiant le format des variables, en les mettant dans le bon format, en (re)travaillant les modalités dune variable qualitative (avec notamment les fonctions mutate(), case_when(), as.factor(), ou encore celles du package factors), en détectant/visualisant/gérant les valeurs manquantes dune variable quantitative avec entre autres le package naniar, en détectant/visualiant/gérant les valeurs aberrantes dune variable quantitative à partir en particulier des statistiques de la boîte à moustaches (fonction geom_boxplot() à utiliser avec ggplot(), fonction boxplot.stats()), et enfin, en transformant une variable quantitative en variable qualitative (avec les fonctions cut() et fancycut()). Lusage pour cette phase du langage dplyr ou plus généralement du tidyverse est particulièrement conseillée, cela permet denchaîner des fonctions en une seule instruction. 4.2 Enregistrement des tables Et voilà, on a bien trituré ces deux bases de données, maintenant on peut les enregistrer dans notre projet pour pouvoir les réutiliser lors de la prochaine séance. "],["05-Questions-fouille-donnees.html", "Section 5 Quelles questions intéressantes pour une fouille de données sur cette base ? 5.1 Caractéristiques des logements de la commune de Paris 5.2 Systématiser nos procédures : construire une fonction", " Section 5 Quelles questions intéressantes pour une fouille de données sur cette base ? Quelles sont les questions intéressantes que lon peut se poser ? Quest-ce quon va pouvoir mettre en évidence à partir de ces données ? Dabord, on pourrait caractériser les logements fanciliens selon le type de logement (appartement, maison, HLM, ), la superficie, le nombre de pièces, le nombre de personnes y habitant, le statut doccupation (propriétaire, locataire, ). Ensuite, on pourrait décrire plus précisément les pièces du logement en termes de confort (baignoire / douche, salle climatisée, moyen de chauffage), ainsi que les parties communes de limmeuble (ascenseur, place de stationnement). Enfin, on pourrait étudier les caractéristiques des occupants de ces logements, et en premier lieu ici ce que lInsee appelle la personne de référence du ménage. Par ailleurs, toutes ces analyses peuvent être réalisées en comparant les différentes communes de la région, ou à un niveau géographique plus fin par quartiers, arrondissements ou encore IRIS. Pour manipuler cette base et répondre à quelques-unes de ces questions, nous allons nous concentrer sur la commune de Paris, et allons chercher à reproduire des statistiques publiées sur le site de lInsee. Nous produirons principalement, lors de cette séance, des tableaux de statistiques, lanalyse graphique fera en effet lobjet dune séance entière car elle nécessite la présentation détaillée de la grammaire Ggplot. Avant cela, si les tables de données (RP et meta) ne sont plus dans votre environnement local, il faut de nouveau les importer à partir de lenregistrement précédemment effectué dans le dossier data de votre projet. Pour cela, il faut utiliser la fonction readRDS(), comme ci-dessous : 5.1 Caractéristiques des logements de la commune de Paris Sur le site de lInsee, vous pouvez trouver les statistiques générales sur les logements à Paris en 2019 ici. Comme nous devons utiliser la pondération pour avoir des statistiques représentatives de la population française, une manière de faire est dutiliser une méthode de comptage par variable catégorielle en indiquant la pondération à utiliser. La fonction count() avec largument wt= est un des moyens assez efficace dy arriver. Cela nous donnera le nombre de ménages concernés par la caractéristique étudiée (par défaut, la variable créée sappelle n, on peut la renommer dans une étape ultérieure avec la fonction rename()). Souvent, cest aussi les pourcentages que lon souhaite avoir, il faudra alors créer une variable faisant la proportion de chaque catégorie sur le nombre total de logements, en utilisant la fonction mutate() et la fonction prop.table(). Le package janitor permet enfin dajouter une ligne totale (ou une colonne totale selon ce quon souhaite faire) avec la fonction adorn_totals(), argument row pour avoir le total en ligne. A partir de ces indications, afficher le tableau suivant à partir dun code utilisant le langage tidyverse et en une seule procédure (sans nécessairement créer de table dans votre environnement) : html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #doehulahww .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #doehulahww .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #doehulahww .gt_caption { padding-top: 4px; padding-bottom: 4px; } #doehulahww .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #doehulahww .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #doehulahww .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #doehulahww .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #doehulahww .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #doehulahww .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #doehulahww .gt_column_spanner_outer:first-child { padding-left: 0; } #doehulahww .gt_column_spanner_outer:last-child { padding-right: 0; } #doehulahww .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #doehulahww .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #doehulahww .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #doehulahww .gt_from_md > :first-child { margin-top: 0; } #doehulahww .gt_from_md > :last-child { margin-bottom: 0; } #doehulahww .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #doehulahww .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #doehulahww .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #doehulahww .gt_row_group_first td { border-top-width: 2px; } #doehulahww .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #doehulahww .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #doehulahww .gt_first_summary_row.thick { border-top-width: 2px; } #doehulahww .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #doehulahww .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #doehulahww .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #doehulahww .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #doehulahww .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #doehulahww .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #doehulahww .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #doehulahww .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #doehulahww .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #doehulahww .gt_left { text-align: left; } #doehulahww .gt_center { text-align: center; } #doehulahww .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #doehulahww .gt_font_normal { font-weight: normal; } #doehulahww .gt_font_bold { font-weight: bold; } #doehulahww .gt_font_italic { font-style: italic; } #doehulahww .gt_super { font-size: 65%; } #doehulahww .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #doehulahww .gt_asterisk { font-size: 100%; vertical-align: 0; } #doehulahww .gt_indent_1 { text-indent: 5px; } #doehulahww .gt_indent_2 { text-indent: 10px; } #doehulahww .gt_indent_3 { text-indent: 15px; } #doehulahww .gt_indent_4 { text-indent: 20px; } #doehulahww .gt_indent_5 { text-indent: 25px; } Type de logement Effectif Pourcentage Maison 11 260 0.8 Appartement 1 346 430 96.9 Autres 31 685 2.3 Total 1 389 375 100.0 library(tidyverse) library(janitor) library(gt) RP %&gt;% filter(COMMUNE == &quot;75056&quot;) %&gt;% count(TYPL_moda, wt=IPONDL) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &#39;Type de logement&#39;=TYPL_moda) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) Non sans grande surprise, la commune de Paris est constituée en majorité dappartements, presque 97%. Cherchons maintenant la répartition des logements parisiens par type, est-ce plutôt des résidences principales ou secondaires ? combien y a-t-il de logements vacants ? html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #seyyneyhox .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #seyyneyhox .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #seyyneyhox .gt_caption { padding-top: 4px; padding-bottom: 4px; } #seyyneyhox .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #seyyneyhox .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #seyyneyhox .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #seyyneyhox .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #seyyneyhox .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #seyyneyhox .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #seyyneyhox .gt_column_spanner_outer:first-child { padding-left: 0; } #seyyneyhox .gt_column_spanner_outer:last-child { padding-right: 0; } #seyyneyhox .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #seyyneyhox .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #seyyneyhox .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #seyyneyhox .gt_from_md > :first-child { margin-top: 0; } #seyyneyhox .gt_from_md > :last-child { margin-bottom: 0; } #seyyneyhox .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #seyyneyhox .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #seyyneyhox .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #seyyneyhox .gt_row_group_first td { border-top-width: 2px; } #seyyneyhox .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #seyyneyhox .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #seyyneyhox .gt_first_summary_row.thick { border-top-width: 2px; } #seyyneyhox .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #seyyneyhox .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #seyyneyhox .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #seyyneyhox .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #seyyneyhox .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #seyyneyhox .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #seyyneyhox .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #seyyneyhox .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #seyyneyhox .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #seyyneyhox .gt_left { text-align: left; } #seyyneyhox .gt_center { text-align: center; } #seyyneyhox .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #seyyneyhox .gt_font_normal { font-weight: normal; } #seyyneyhox .gt_font_bold { font-weight: bold; } #seyyneyhox .gt_font_italic { font-style: italic; } #seyyneyhox .gt_super { font-size: 65%; } #seyyneyhox .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #seyyneyhox .gt_asterisk { font-size: 100%; vertical-align: 0; } #seyyneyhox .gt_indent_1 { text-indent: 5px; } #seyyneyhox .gt_indent_2 { text-indent: 10px; } #seyyneyhox .gt_indent_3 { text-indent: 15px; } #seyyneyhox .gt_indent_4 { text-indent: 20px; } #seyyneyhox .gt_indent_5 { text-indent: 25px; } Catégorie de logement Effectif Pourcentage Résidences principales 1 137 759 81.9 Résidences secondaires 85 675 6.2 Logements vacants 120 295 8.7 Logements occasionnels 45 645 3.3 Total 1 389 375 100.1 RP %&gt;% filter(COMMUNE == &quot;75056&quot;) %&gt;% mutate(CATL_moda=case_when(CATL == &quot;1&quot; ~ &quot;Résidences principales&quot;, CATL == &quot;2&quot; ~ &quot;Logements occasionnels&quot;, CATL == &quot;3&quot; ~ &quot;Résidences secondaires&quot;, CATL == &quot;4&quot; ~ &quot;Logements vacants&quot;, TRUE ~ &quot;Autres&quot;), CATL_moda=fct_relevel(CATL_moda, c(&quot;Résidences principales&quot;, &quot;Résidences secondaires&quot;, &quot;Logements vacants&quot;, &quot;Logements occasionnels&quot;))) %&gt;% count(CATL_moda, wt=IPONDL) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &#39;Catégorie de logement&#39;=CATL_moda) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) La plupart des logements parisiens sont des résidences principales (81,9%), alors que 6,2% sont des résidences secondaires ; à noter que la part des logements vacants nest pas négligeable, elle sélève à 8,7%. Maintenant, affichons la seule colonne 2019 de ce tableau tiré de lInsee , en mettant la ligne Ensemble des résidences principales plutôt en fin de tableau (ces 2 usages sont possibles, question de préférence) ; attention au champ sur lequel porte ces moyennes RP %&gt;% filter(COMMUNE == &quot;75056&quot; &amp; CATL== &quot;1&quot; &amp; TYPL_moda != &quot;Autres&quot;) %&gt;% group_by(TYPL_moda) %&gt;% summarise(&#39;2019&#39; = weighted.mean(as.numeric(as.character(NBPI)), IPONDL, na.rm=T)) %&gt;% bind_rows(summarise(TYPL_moda = &quot;Ensemble des résidences principales&quot;, RP[RP$COMMUNE == &quot;75056&quot; &amp; RP$CATL == &quot;1&quot; &amp; RP$TYPL_moda != &quot;Autres&quot;,], &#39;2019&#39; = weighted.mean(as.numeric(as.character(NBPI)), IPONDL, na.rm=T))) %&gt;% rename(&#39; &#39; = TYPL_moda) %&gt;% gt() %&gt;% fmt_number(columns = 2, dec_mark = &quot;,&quot;, decimals = 1) A Paris, sur les seules résidences principales, les maisons comportent plus de pièces que les appartements, presque 2 pièces de plus en moyenne. Etant donné que la majorité des logements est constituée par des appartements, la moyenne de lensemble des résidences principales est la même que celle des appartements. Etudions maintenant les résidences principales et lancienneté demménagement selon le statut doccupation. Attention, ici il faut procéder en plusieurs étapes : dabord créer un tableau donnant la répartition en nombre et en pourcentage des ménages par statut doccupation, puis créer un second tableau donnant la moyenne de lancienneté demménagement en années par statut doccupation, puis fusionner ces deux tableaux. html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #zmcnftgdwa .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #zmcnftgdwa .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #zmcnftgdwa .gt_caption { padding-top: 4px; padding-bottom: 4px; } #zmcnftgdwa .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #zmcnftgdwa .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #zmcnftgdwa .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zmcnftgdwa .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #zmcnftgdwa .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #zmcnftgdwa .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #zmcnftgdwa .gt_column_spanner_outer:first-child { padding-left: 0; } #zmcnftgdwa .gt_column_spanner_outer:last-child { padding-right: 0; } #zmcnftgdwa .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #zmcnftgdwa .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #zmcnftgdwa .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #zmcnftgdwa .gt_from_md > :first-child { margin-top: 0; } #zmcnftgdwa .gt_from_md > :last-child { margin-bottom: 0; } #zmcnftgdwa .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #zmcnftgdwa .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #zmcnftgdwa .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #zmcnftgdwa .gt_row_group_first td { border-top-width: 2px; } #zmcnftgdwa .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #zmcnftgdwa .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #zmcnftgdwa .gt_first_summary_row.thick { border-top-width: 2px; } #zmcnftgdwa .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zmcnftgdwa .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #zmcnftgdwa .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #zmcnftgdwa .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #zmcnftgdwa .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #zmcnftgdwa .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #zmcnftgdwa .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #zmcnftgdwa .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #zmcnftgdwa .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #zmcnftgdwa .gt_left { text-align: left; } #zmcnftgdwa .gt_center { text-align: center; } #zmcnftgdwa .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #zmcnftgdwa .gt_font_normal { font-weight: normal; } #zmcnftgdwa .gt_font_bold { font-weight: bold; } #zmcnftgdwa .gt_font_italic { font-style: italic; } #zmcnftgdwa .gt_super { font-size: 65%; } #zmcnftgdwa .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #zmcnftgdwa .gt_asterisk { font-size: 100%; vertical-align: 0; } #zmcnftgdwa .gt_indent_1 { text-indent: 5px; } #zmcnftgdwa .gt_indent_2 { text-indent: 10px; } #zmcnftgdwa .gt_indent_3 { text-indent: 15px; } #zmcnftgdwa .gt_indent_4 { text-indent: 20px; } #zmcnftgdwa .gt_indent_5 { text-indent: 25px; } Statut d'occupation Nombre Pourcentage Ancienneté moyenne d'emménagement en année(s) Propriétaire 379 745 33.4 18.2 Locataire 701 943 61.7 10.3 Logé gratuitement 56 071 4.9 10.4 Total 1 137 759 100.0 13.0 t1 &lt;- RP %&gt;% filter(COMMUNE == &quot;75056&quot; &amp; CATL==&quot;1&quot; &amp; STOCD != &quot;0&quot;) %&gt;% mutate(st_occupation=case_when(STOCD==&quot;10&quot; ~ &quot;Propriétaire&quot;, STOCD %in% c(&quot;21&quot;,&quot;22&quot;,&quot;23&quot;) ~ &quot;Locataire&quot;, STOCD==&quot;30&quot; ~ &quot;Logé gratuitement&quot;), st_occupation=fct_relevel(st_occupation, c(&quot;Propriétaire&quot;, &quot;Locataire&quot;, &quot;Logé gratuitement&quot;))) %&gt;% count(st_occupation, wt=IPONDL) %&gt;% mutate(Pourcentage=round(prop.table(n)*100, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Nombre=n) t2 &lt;- RP %&gt;% filter(COMMUNE == &quot;75056&quot; &amp; CATL==&quot;1&quot; &amp; !STOCD %in% c(&quot;0&quot;, &quot;ZZ&quot;)) %&gt;% mutate(st_occupation=case_when(STOCD==&quot;10&quot; ~ &quot;Propriétaire&quot;, STOCD %in% c(&quot;21&quot;,&quot;22&quot;,&quot;23&quot;) ~ &quot;Locataire&quot;, STOCD==&quot;30&quot; ~ &quot;Logé gratuitement&quot;), st_occupation=fct_relevel(st_occupation, c(&quot;Propriétaire&quot;, &quot;Locataire&quot;, &quot;Logé gratuitement&quot;))) %&gt;% group_by(st_occupation) %&gt;% summarise(anc_moy = weighted.mean(ANEM, IPONDL, na.rm=T)) %&gt;% bind_rows(summarise(st_occupation = &quot;Total&quot;, RP[RP$COMMUNE == &quot;75056&quot; &amp; RP$CATL==&quot;1&quot; &amp; !RP$STOCD %in% c(&quot;0&quot;, &quot;ZZ&quot;),], anc_moy = weighted.mean(ANEM, IPONDL, na.rm=T))) %&gt;% mutate(anc_moy=round(anc_moy, 1)) %&gt;% rename(&quot;Ancienneté moyenne d&#39;emménagement en année(s)&quot;=anc_moy) t1 %&gt;% left_join(t2, by=join_by(st_occupation)) %&gt;% rename(&quot;Statut d&#39;occupation&quot;=st_occupation) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) Il y a donc 1/3 de propriétaires à Paris quand on se concentre sur les résidences principales, et les propriétaires y sont présents depuis plus longtemps que les locataires : 18,2 ans en moyenne contre 10,3 ans. Enfin, on peut vouloir comparer la moyenne des pièces des appartements parisiens par arrondissement par exemple. html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #cjyxzevxgx .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #cjyxzevxgx .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cjyxzevxgx .gt_caption { padding-top: 4px; padding-bottom: 4px; } #cjyxzevxgx .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #cjyxzevxgx .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #cjyxzevxgx .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cjyxzevxgx .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cjyxzevxgx .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #cjyxzevxgx .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #cjyxzevxgx .gt_column_spanner_outer:first-child { padding-left: 0; } #cjyxzevxgx .gt_column_spanner_outer:last-child { padding-right: 0; } #cjyxzevxgx .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #cjyxzevxgx .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #cjyxzevxgx .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #cjyxzevxgx .gt_from_md > :first-child { margin-top: 0; } #cjyxzevxgx .gt_from_md > :last-child { margin-bottom: 0; } #cjyxzevxgx .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #cjyxzevxgx .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #cjyxzevxgx .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #cjyxzevxgx .gt_row_group_first td { border-top-width: 2px; } #cjyxzevxgx .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cjyxzevxgx .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #cjyxzevxgx .gt_first_summary_row.thick { border-top-width: 2px; } #cjyxzevxgx .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cjyxzevxgx .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cjyxzevxgx .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #cjyxzevxgx .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #cjyxzevxgx .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cjyxzevxgx .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cjyxzevxgx .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #cjyxzevxgx .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cjyxzevxgx .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #cjyxzevxgx .gt_left { text-align: left; } #cjyxzevxgx .gt_center { text-align: center; } #cjyxzevxgx .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #cjyxzevxgx .gt_font_normal { font-weight: normal; } #cjyxzevxgx .gt_font_bold { font-weight: bold; } #cjyxzevxgx .gt_font_italic { font-style: italic; } #cjyxzevxgx .gt_super { font-size: 65%; } #cjyxzevxgx .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #cjyxzevxgx .gt_asterisk { font-size: 100%; vertical-align: 0; } #cjyxzevxgx .gt_indent_1 { text-indent: 5px; } #cjyxzevxgx .gt_indent_2 { text-indent: 10px; } #cjyxzevxgx .gt_indent_3 { text-indent: 15px; } #cjyxzevxgx .gt_indent_4 { text-indent: 20px; } #cjyxzevxgx .gt_indent_5 { text-indent: 25px; } Arrondissement Nombre moyen de pièces 75101 2,6 75102 2,4 75103 2,4 75104 2,6 75105 2,6 75106 2,8 75107 3,0 75108 3,2 75109 2,7 75110 2,5 75111 2,3 75112 2,5 75113 2,6 75114 2,6 75115 2,6 75116 3,2 75117 2,7 75118 2,3 75119 2,6 75120 2,5 Ensemble des appartements 2,2 RP %&gt;% filter(COMMUNE == &quot;75056&quot; &amp; CATL== &quot;1&quot; &amp; TYPL_moda == &quot;Appartement&quot;) %&gt;% group_by(ARM) %&gt;% summarise(Moy_pieces = weighted.mean(as.numeric(as.character(NBPI)), IPONDL, na.rm=T)) %&gt;% bind_rows(summarise(ARM = &quot;Ensemble des appartements&quot;, RP[RP$COMMUNE == &quot;75056&quot; &amp; RP$CATL == &quot;1&quot; &amp; RP$TYPL_moda != &quot;Appartement&quot;,], Moy_pieces = weighted.mean(as.numeric(as.character(NBPI)), IPONDL, na.rm=T))) %&gt;% rename(Arrondissement=ARM, &#39;Nombre moyen de pièces&#39;=Moy_pieces) %&gt;% gt() %&gt;% fmt_number(columns = 2, dec_mark = &quot;,&quot;, decimals = 1) Ainsi, si lon veut créer des tableaux de répartition à une seule variable, on peut utiliser ces procédures qui se structurent toujours de la même façon. Au lieu de faire un copié-collé du code et de changer le nom des variables, autrement dit pour systématiser nos procédures, une astuce est de créer ses propres fonctions. Cest ce que nous allons étudier maintenant. 5.2 Systématiser nos procédures : construire une fonction Pour ré-utiliser un code de façon plus automatique, créer des fonctions est très utile (et on peut même les stocker dans un fichier .r pour les réutiliser plus tard pour une autre étude). Lidée est quà partir dun bloc dinstructions ou de lignes de codes, on lintègre dans une fonction qui portera un nom et qui pourra être appliquée sur les paramètres que lon veut (table/objet différent, variables différentes) et qui nous retournera une valeur en sortie (quil faut préciser donc). Par exemple : # Exemple fonction avec 3 arguments nom_fonction &lt;- function(data, var1, var2) { expression... # Ce que la fonction fait return() # Optionnel, mais la plupart du temps utilisé (!), # pour sortir le résultat de la fonction } # L&#39;appel de la fonction devra ainsi préciser la table de données sur laquelle # l&#39;appliquer et les autres arguments : nom_fonction(data = nom_de_ma_table , var1 = nom_de_ma_variable1, var2 = nom_de_ma_variable2) # De plus, on pourra créer un nouvel objet (ici &quot;tab_var&quot;) pour stocker la table # qui est en valeur de sortie de la fonction : tab_var &lt;- nom_fonction(data = nom_de_ma_table , var1 = nom_de_ma_variable1, var2 = nom_de_ma_variable2) Les arguments doivent donc être précisés en entrée de notre fonction, si on ne les précise pas cela nous retournera une erreur à moins que lon ait spécifié des valeurs par défaut (ce qui peut être utile si on utilise souvent les mêmes paramètres, par exemple la même base de données) ; il peut y avoir autant darguments que lon souhaite. Si lon utilise le langage tidyverse, il faut connaître quelques petits trucs pour écrire une fonction. Le schéma suivant réalisé par Julien Barnier du CNRS nous sera très utile. Pour une fonction utilisant le langage tidyverse Source : Julien Barnier, https://twitter.com/lapply/status/1493908215796535296?s=20&amp;t=p4aYIEV4GsGS3TGftPa0Nw. Vous trouverez également des informations utiles ici ou là. On peut dabord créer une fonction reprenant le code précédent pour la construction de tableau. On lappelle tableau, et on lui donne comme arguments data, filtre_com, var_quali, pond et nom_var_quali. Dans le langage tidyverse, au sein dune fonction, il faut appeler une variable avec des doubles-accolades {{ }}. Si lon utilise une fonction summarise(), une autre subtilité à connaître est que cette syntaxe summarise({{ nom_var }} = mean({{ var }}, na.rm=TRUE)) ne sera pas reconnue, car il faut indiquer non pas un = mais un := pour que la fonction puisse être lue lorsque le nom donné à la variable est de type caractère ou string. Enfin, il ne faut pas oublier de retourner un objet en sortie avec return(). Essayez donc de créer une fonction tableau(), reprenant le premier code de la section précédente et remise ci-dessous pour information : RP %&gt;% filter(COMMUNE == &quot;75056&quot;) %&gt;% count(TYPL_moda, wt=IPONDL) %&gt;% mutate(Pourcentage=prop.table(n)*100, Pourcentage=round(Pourcentage, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, &#39;Type de logement&#39;=TYPL_moda) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #dclhvabrwr .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #dclhvabrwr .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dclhvabrwr .gt_caption { padding-top: 4px; padding-bottom: 4px; } #dclhvabrwr .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #dclhvabrwr .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #dclhvabrwr .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dclhvabrwr .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dclhvabrwr .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #dclhvabrwr .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #dclhvabrwr .gt_column_spanner_outer:first-child { padding-left: 0; } #dclhvabrwr .gt_column_spanner_outer:last-child { padding-right: 0; } #dclhvabrwr .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #dclhvabrwr .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #dclhvabrwr .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #dclhvabrwr .gt_from_md > :first-child { margin-top: 0; } #dclhvabrwr .gt_from_md > :last-child { margin-bottom: 0; } #dclhvabrwr .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #dclhvabrwr .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #dclhvabrwr .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #dclhvabrwr .gt_row_group_first td { border-top-width: 2px; } #dclhvabrwr .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dclhvabrwr .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #dclhvabrwr .gt_first_summary_row.thick { border-top-width: 2px; } #dclhvabrwr .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dclhvabrwr .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dclhvabrwr .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #dclhvabrwr .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #dclhvabrwr .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dclhvabrwr .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dclhvabrwr .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #dclhvabrwr .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dclhvabrwr .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #dclhvabrwr .gt_left { text-align: left; } #dclhvabrwr .gt_center { text-align: center; } #dclhvabrwr .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #dclhvabrwr .gt_font_normal { font-weight: normal; } #dclhvabrwr .gt_font_bold { font-weight: bold; } #dclhvabrwr .gt_font_italic { font-style: italic; } #dclhvabrwr .gt_super { font-size: 65%; } #dclhvabrwr .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #dclhvabrwr .gt_asterisk { font-size: 100%; vertical-align: 0; } #dclhvabrwr .gt_indent_1 { text-indent: 5px; } #dclhvabrwr .gt_indent_2 { text-indent: 10px; } #dclhvabrwr .gt_indent_3 { text-indent: 15px; } #dclhvabrwr .gt_indent_4 { text-indent: 20px; } #dclhvabrwr .gt_indent_5 { text-indent: 25px; } Type de logement Effectif Pourcentage Maison 11 260 0.8 Appartement 1 346 430 96.9 Autres 31 685 2.3 Total 1 389 375 100.0 # library(tidyverse) # library(janitor) # library(gt) tableau &lt;- function(data, filtre_com, var_quali, pond=IPONDL, nom_var_quali){ tab &lt;- data %&gt;% filter(COMMUNE == filtre_com) %&gt;% count({{ var_quali }}, wt={{ pond }}) %&gt;% mutate(Pourcentage=prop.table(n)*100, Pourcentage=round(Pourcentage, 1)) %&gt;% adorn_totals(&quot;row&quot;) %&gt;% rename(Effectif=n, {{nom_var_quali}}:={{ var_quali }}) return(tab) } On peut vérifier quon obtient bien la même chose : tableau(data=RP, filtre_com=&quot;75056&quot;, var_quali=TYPL_moda, nom_var_quali=&quot;Type de logement&quot;) %&gt;% gt() %&gt;% fmt_number(columns = 2, sep_mark = &quot; &quot;, decimals = 0) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #oyofultpvx .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #oyofultpvx .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #oyofultpvx .gt_caption { padding-top: 4px; padding-bottom: 4px; } #oyofultpvx .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #oyofultpvx .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #oyofultpvx .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #oyofultpvx .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #oyofultpvx .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #oyofultpvx .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #oyofultpvx .gt_column_spanner_outer:first-child { padding-left: 0; } #oyofultpvx .gt_column_spanner_outer:last-child { padding-right: 0; } #oyofultpvx .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #oyofultpvx .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #oyofultpvx .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #oyofultpvx .gt_from_md > :first-child { margin-top: 0; } #oyofultpvx .gt_from_md > :last-child { margin-bottom: 0; } #oyofultpvx .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #oyofultpvx .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #oyofultpvx .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #oyofultpvx .gt_row_group_first td { border-top-width: 2px; } #oyofultpvx .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #oyofultpvx .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #oyofultpvx .gt_first_summary_row.thick { border-top-width: 2px; } #oyofultpvx .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #oyofultpvx .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #oyofultpvx .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #oyofultpvx .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #oyofultpvx .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #oyofultpvx .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #oyofultpvx .gt_footnote { margin: 0px; font-size: 90%; padding-left: 4px; padding-right: 4px; padding-left: 5px; padding-right: 5px; } #oyofultpvx .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #oyofultpvx .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #oyofultpvx .gt_left { text-align: left; } #oyofultpvx .gt_center { text-align: center; } #oyofultpvx .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #oyofultpvx .gt_font_normal { font-weight: normal; } #oyofultpvx .gt_font_bold { font-weight: bold; } #oyofultpvx .gt_font_italic { font-style: italic; } #oyofultpvx .gt_super { font-size: 65%; } #oyofultpvx .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 75%; vertical-align: 0.4em; } #oyofultpvx .gt_asterisk { font-size: 100%; vertical-align: 0; } #oyofultpvx .gt_indent_1 { text-indent: 5px; } #oyofultpvx .gt_indent_2 { text-indent: 10px; } #oyofultpvx .gt_indent_3 { text-indent: 15px; } #oyofultpvx .gt_indent_4 { text-indent: 20px; } #oyofultpvx .gt_indent_5 { text-indent: 25px; } Type de logement Effectif Pourcentage Maison 11 260 0.8 Appartement 1 346 430 96.9 Autres 31 685 2.3 Total 1 389 375 100.0 Essayez décrire une seconde fonction somme() permettant de systématiser le code suivant qui donne un tableau de contingence du nombre de propriétaires par IRIS (cela nous servira pour plus tard), en ajoutant une fonction de filtre qui peut contenir plusieurs variables. Pour cela, on va utiliser largument  (lire dot) : cet argument est très pratique si lon ne sait pas combien il y aura de variable(s) dans la fonction à laquelle elle sapplique, cest-à-dire autant 0 variable, 1 variable ou plus dune variable ; mais elle peut aussi être dangereuse si on ne se souvient plus quon la créée et/ou si on ne fait pas attention à bien remplir les autres arguments avec les noms correspondants. On va également introduire la fonction group_by() pour avoir les tableaux de contingence par IRIS. RP %&gt;% filter(COMMUNE == &quot;75056&quot; &amp; STOCD == &quot;10&quot;) %&gt;% group_by(IRIS) %&gt;% summarise(nb_proprietaires = sum(IPONDL)) %&gt;% mutate(nb_proprietaires=round(nb_proprietaires, 0)) # A tibble: 917 x 2 IRIS nb_proprietaires &lt;fct&gt; &lt;dbl&gt; 1 751010101 107 2 751010102 52 3 751010103 35 4 751010201 472 5 751010202 302 6 751010203 511 7 751010204 328 8 751010206 95 9 751010301 584 10 751010302 34 # i 907 more rows somme &lt;- function(data, ..., var_gpe, nom_var, var1){ som_1 &lt;- data %&gt;% filter(...) %&gt;% group_by({{var_gpe}}) %&gt;% summarise({{nom_var}}:=sum({{var1}}, na.rm=T)) %&gt;% mutate({{nom_var}}:=round({{nom_var}}, 0)) return(som_1) } Vérifions : somme(data=RP, COMMUNE == &quot;75056&quot; &amp; STOCD == &quot;10&quot;, var_gpe=IRIS, nom_var=nb_proprietaires, var1=IPONDL) # A tibble: 917 x 2 IRIS nb_proprietaires &lt;fct&gt; &lt;dbl&gt; 1 751010101 107 2 751010102 52 3 751010103 35 4 751010201 472 5 751010202 302 6 751010203 511 7 751010204 328 8 751010206 95 9 751010301 584 10 751010302 34 # i 907 more rows La création de fonctions est donc très utile pour avoir un code plus efficace ; il faut toutefois réfléchir à son usage avant de la créer pour savoir à quel point il faut systématiser les procédures utilisées, certains éléments devant être laissés probablement en-dehors de la fonction, comme dans lexemple précédent le fait darrondir les chiffres. Il faut par ailleurs toujours vérfier, sur un ou deux exemples, que la fonction fonctionne bien, cest-à-dire donne les mêmes résultats que le code initial. Pour pouvoir les réutiliser ultérieurement, on peut les réécrire dans un nouveau script quon enregistre dans un dossier de notre projet quon intitule fonctions ; il suffira ensuite dappeler ce programme avec la fonction source() : source(&quot;fonctions/fonctions.R&quot;) "],["06-Intro-a-Shiny-theorique.html", "Section 6 Les applications interactives avec Shiny App 6.1 La structure générale dune application Shiny 6.2 La réactivité 6.3 Un exemple avec le code du script par défaut", " Section 6 Les applications interactives avec Shiny App Comme indiqué sur la page officielle de Shiny-RStudio ici, Shiny est un package R qui permet de créer des applications ou des pages web de visualisations interactives de données, directement à partir de R, autremet dit sans connaître nécessairement le langage HTML, Javascript, etc., et donc aussi en pouvant utiliser toutes les fonctions disponibles sous R. En réalité, linterface utilisateur de lapplication Shiny est bien du langage HTML, mais Shiny donne des outils faciles pour lécrire sans avoir à connaître le HTML. Il nous faut dabord installer le package Shiny, puis le charger : #install.packages(&quot;shiny&quot;) library(shiny) Des exemples dapplication Shiny sont données sur la page officielle dans la galerie ; ou on peut aussi en lancer une directement dans R, avec par exemple le code suivant : # Voici la liste des exemples que vous pouvez spécifier dans la fonction # suivante : &quot;01_hello&quot;, &quot;02_text&quot;, &quot;03_reactivity&quot;, &quot;04_mpg&quot;, # &quot;05_sliders&quot;, &quot;06_tabsets&quot;, &quot;07_widgets&quot;, &quot;08_html&quot;, &quot;09_upload&quot;, # &quot;10_download&quot;, &quot;11_timer&quot; runExample(&quot;01_hello&quot;) Un autre exemple dapplication finale qui comprend un aspect territorial donc avec de jolis cartes est également disponible ici. Enfin, cette introduction sappuie sur dautres ressources externes, pour nen citer que quelques uns : - un bon tutoriel ici ; - une introduction claire là. Et vous trouverez sur les 2 liens suivants deux ouvrages en ligne, pour compléter et aller plus loin : the Mastering Shiny ; et the Interactive web-based data visualization with R, plotly, and shiny. 6.1 La structure générale dune application Shiny Lapplication est divisée en 2 sections : linterface utilisateur (ui) et une fonction serveur (server). Lintérêt de Shiny est sa réactivité : quand lutilisateur change un paramètre, tout ce qui dépend de ce paramètre est automatiquement actualisé sur la page. On dit que cest une application server-based, dans la mesure où la construction des graphiques et/ou tableaux affichés (ou tout autre objet) se font sur le serveur, autrement dit sur le RStudio de votre ordinateur. Ainsi, comme on peut le voir sur les exemples cités au-dessus, la structure du code sera toujours la suivante : library(shiny) # Fonction &quot;ui&quot; ui &lt;- fluidPage( ) # Fonction &quot;server&quot; server &lt;- function(input, output) { } # Fonction qui crée l&#39;application Shiny en reprenant les 2 fonctions # principales à noter que comme elles ont le même nom, souvent on ne # précisera pas de nouveau les arguments &quot;ui = &quot; et &quot;server = &quot; shinyApp(ui = ui, server = server) 6.1.1 La partie UI LUI ou interface utilisateur utilise par défaut la fonction fluidPage() qui permet de créer la mise en page de lapplication et qui répondra automatiquement aux changements effectués sur le navigateur par lutilisateur. Cette fonction fluidPage() va contenir des indications comme le titre (avec titlePanel()), éventuellement un sous-titre, etc., ainsi que deux fonctions sidebarLayout() et mainPanel(). Le première comprend la fonction sidebarPanel() qui contient le ou les widgets à partir duquel ou desquels les utilisateurs sélectionneront des valeurs  par défaut est indiqué un sliderInput(). La seconde contient la sortie voulue, cest-à-dire un graphique, un tableau, etc., avec par défaut la fonction plotOutput(), mais elle peut en contenir dautres Les graphiques ou tableaux de ces fonctions ...Ouput() sont ensuite précisées (et construits) dans la partie Server de lapplication Shiny. #library(shiny) # Fonction &quot;ui&quot; ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Titre à définir&quot;), # Mise en page de la barre latérale avec les définitions des # entrées et des sorties sidebarLayout( # Panneau latéral pour les entrées sidebarPanel( # Entrée : wigdet choisi, par défaut &quot;sliderInput()&quot; sliderInput( ) ), # Panneau principal pour l&#39;affichage des sorties mainPanel( # Sortie : graphique, tableau, etc. plotOutput(&quot;nom_du_graphe&quot;) ) ) ) # Fonction &quot;server&quot; server &lt;- function(input, output) { } # Fonction qui crée l&#39;application Shiny shinyApp(ui = ui, server = server) La liste des widgets est reproduite ci-dessous avec un tableau et une image récapitulative (disponible directement ici) ; à part les arguments communs inputID() et label(), les autres arguments diffèrent selon le widget, il est donc essentiel dy faire un tour avant den utiliser un si lon ne le connaît pas a priori. Tableau : Fonctions Shiny et widgets associés Fonction Widget sliderInput Barre de défilement actionButton Bouton daction checkboxGroupInput Groupe de cases à cocher checkboxInput Case unique à cocher dateInput calendrier pour sélectionner une ou des dates dateRangeInput Paire de calendriers pour sélectionner une plage de dates numericInput Champ pour saisir des chiffres radioButtons Série de boutons radio selectInput Boîte avec des choix à sélectionner submitButton Bouton de validation fileInput Commande pour télécharger un fichier à partir dun chemin textInput Champ pour saisir du texte helpText Texte daide qui peut être ajouté à un formulaire de saisie Widgets de lapplication Shiny À savoir enfin, on peut également remplacer la fonction sidebarLayout() par une fonction navbarPage() pour permettre plusieurs onglets de navigation sur la même page web (que lon créera avec la fonction tabPanel() à lintérieur de laquelle on retrouvera les fonctions sidebarLayout() et mainPanel()), on y reviendra au cours du semestre 6.1.2 La partie Server Cest la fonction Server qui contient le code principal faisant tourner lapplication web. Elle est définie par la fonction function(input, output){ }. À chaque fonction ...Ouput() dans lui correspond une fonction render...() dans la partie Server. Par exemple, si dans la partie ui, on a définit un histogramme comme ceci dans la fonction : plotOuput(\"distPlot\"), alors dans la partie server, on associera la fonction renderPlot() à output$distPlot. Les fonctions render...() sont celles qui contiennent en effet le code créant, lhistogramme ici, ou tout autre graphique ou tableau, lensemble de lexpression à lintérieur de cette fonction sera contenu dans des accolades {}. #library(shiny) # Fonction &quot;ui&quot; ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Titre à définir&quot;), # Mise en page de la barre latérale avec les définitions des # entrées et des sorties sidebarLayout( # Panneau latéral pour les entrées sidebarPanel( # Entrée : wigdet choisi, par défaut &quot;sliderInput()&quot; sliderInput( ) ), # Panneau principal pour l&#39;affichage des sorties mainPanel( # Sortie : graphique, tableau, etc. plotOutput(&quot;nom_du_graphe&quot;) ) ) ) # Fonction &quot;server&quot; server &lt;- function(input, output) { # Reprend la sortie mentionnée plus haut (ici &quot;nom_du_graphe&quot;) output$nom_du_graphe &lt;- renderPlot({ # code de création du graphique, qui sera réactive selon les # valeurs données en entrées (cf. fonction &quot;fluidPage()&quot;) }) } # Fonction qui crée l&#39;application Shiny shinyApp(ui = ui, server = server) Voici les différentes fonctions ...Ouput() créant un objet de sortie : Fonction de sortie Type dobjet créé dataTableOutput Table de données imageOutput Image plotOutput Graphique tableOutput Table textOutput Texte uiOutput HTML brut htmlOutput HTML brut verbatimTextOutput Texte Et les fonctions render...() associées : Fonction de sortie Type dobjet créé renderDataTable Table de données renderImage Image (enregistré comme un lien vers un fichier source) renderPlot Graphique renderTable Table de données, matrices, ou autres structures de type tableau renderText Texte sous forme de chaînes de caractères renderUI objet de balise Shiny ou HTML renderPrint Toute sortie imprimée 6.2 La réactivité Comme dit précédemment, la réactivité est au centre du fonctionnement dune application Shiny. Plusieurs types de réactivité peut être distingués : un premier type de réactivité, le plus simple, à travers les interactions entre les fonctions ui() et server() : comme expliqué au-dessus, cela passe par les input définis dans la partie ui et les output créés dans la partie server ; plus précisément, si on a définit un widget permettant par exemple de choisir une année donnée et quon la appelé annee (avec largument id=\" \"), alors dans la ou les fonctions render...() de la partie server, il faudra renvoyer à cette variable par lindication input$annee. De manière générale, il faudra accoler le nom donné à un input x de cette façon dans le server : input$x. Cela peut être résumé par le schéma suivant, emprunté à lune des sources citées en introduction : Reactivité UI et Server Source : https://laderast.github.io/gradual_shiny/introduction.html un deuxième type de réactivité à travers la base de données elle-même, cest-à-dire qui crée un objet réactif (qui sera à la fois une entrée réactive et une sortie réactive) : il faut alors utiliser, par exemple, la fonction reactive({}) (ou son corrolaire eventReactive()) en lappliquant à la base de données initiale et en renvoyant ainsi une nouvelle base, qui sera elle-même une fonction. On peut par exemple appliquer un filtre à notre base de données selon lannée : au lieu alors de préciser input$annee dans la fonction render...() comme mentionné dans le premier type de réactivité, on va en réalité créer une nouvelle base comme ceci : data_reactive &lt;- reactive({ data %&gt;% filter(annee &gt; input$annee)) }) ; puis lappeler ainsi pour créer le graphique : output$nom_du_graphe &lt;- renderPlot({ data_reactive() }), attention donc vous noterez lutilisation des parenthèses après le nouveau nom de la table. De même, cela peut être résumé par le schéma suivant tiré de la même source : Reactivité base de donneées Source : https://laderast.github.io/gradual_shiny/app-2-reactives.html un troisième type de réactivité qui crée un contexte réactif, à travers notamment la fonction observe({}) (ou son corrolaire observeEvent()) : cette fonction sera utilisée losque vous souhaitez faire une opération qui dépend de plusieurs autres variables réactives, en particulier si vous souhaitez changer un input qui est dépendant dun autre input, mais sans créer nécessairement doutput. Cela peut être utile si le choix dune variable - les départements dune région par exemple - est conditionnée au choix antérieur de la région en question : dans ce cas, lutilisateur qui choisira une région dans un premier widget ne verra safficher que les départements de cette région dans un second widget et non tous les départements disponibles dans la base de données. En réalité, il y a bien dautres fonctions de réactivité dans Shiny (eventReactive(), observeEvent(), reactiveValues(), isolate(), req()), mais quon ne verra pas nécessairement ensemble cette année. 6.3 Un exemple avec le code du script par défaut Voyons ensemble un premier exemple : dans RStudio, ouvrez un nouveau fichier Shiny Web App que vous intitulez comme vous le souhaitez (attention, pas despace permis entre deux mots par exemple), vous laissez loption Single File et vous lenregistrez de préférence dans votre projet. Un nouveau scrip souvre avec par défaut un code minimal déjà écrit : on retrouve la structure du code présentée juste au-dessus, et à lintérieur de lUI et du Server quelques codes pour avoir un titre, un widget sous forme de slider et un graphique qui sera un histogramme daprès la fonction écrit dans la partie Server. Faisons tourner lapplication avec le bouton en haut à droite Run App pour voir ce que cela donne ! On voit bien les différents éléments correspondants au code écrit dans le script R et on voit bien également que lapplication est interactive puisque si lon modifie le nombre de classes dans la barre slider alors le graphique est modifié simultanément ! "],["07-Intro-a-Shiny-exemples.html", "Section 7 La création dune application Shiny pas à pas avec lune de nos bases de données 7.1 Application vide 7.2 Ajout dun titre et dun widget 7.3 Ajout dun graphique 7.4 Modification du graphique : filtrer selon une variable 7.5 Modification du graphique : selon une variable au choix parmi deux", " Section 7 La création dune application Shiny pas à pas avec lune de nos bases de données On va utiliser la base du RP sur laquelle nous travaillons depuis le début, mais en créant des tableaux de contingence à partir des fonctions sauvegardées dans la section précédente. 7.1 Application vide Faisons tourner une application vide et ajoutons au fur et à mesure les éléments qui construirons une vraie application : library(shiny) ui &lt;- fluidPage( ) server &lt;- function(input, output) { } shinyApp(ui = ui, server = server) 7.2 Ajout dun titre et dun widget Ajoutons un titre et un widget, par exemple une barre slider : #library(shiny) # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Nombre de propriétaires par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;Classes&quot;, label = &quot;Nombres de classes : &quot;, min = 1, max = 50, value = 25) ), mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { } shinyApp(ui = ui, server = server) 7.3 Ajout dun graphique Ajoutons un graphique ; il faut pour cela charger la base de données sur laquelle nous allons travailler ; pour lexemple ici, nous allons créer un tableau de contingence à partir des fonctions créées précédemment (que lon appelle donc) et donnant le nombre de propriétaires par commune de lÎle-de-France, en considérant les arrondissements de Paris comme des communes : # appel fonctions enregistrées source(&quot;fonctions/fonctions.R&quot;) # création de 2 tables de données tab_proprio_commune_horsparis &lt;- somme(RP, COMMUNE != &quot;75056&quot; &amp; STOCD == &quot;10&quot;, var_gpe=COMMUNE, nom_var=nb_proprio, var1=IPONDL) tab_proprio_arrdt_paris &lt;- somme(RP, COMMUNE == &quot;75056&quot; &amp; STOCD == &quot;10&quot;, var_gpe=ARM, nom_var=nb_proprio, var1=IPONDL) # on fusionne les 2 tables précédentes tab_proprio &lt;- tab_proprio_arrdt_paris %&gt;% rename(COMMUNE = ARM) %&gt;% rbind(tab_proprio_commune_horsparis) # pour supprimer les tables intermédiaires rm(tab_proprio_commune_horsparis, tab_proprio_arrdt_paris) #library(shiny) # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Nombre de propriétaires par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;classes&quot;, label = &quot;Nombres de classes&quot;, min = 1, max = 50, value = 25) ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { output$histPlot &lt;- renderPlot({ tab_proprio %&gt;% ggplot() + aes(x=nb_proprio) + geom_histogram(bins=25) }) } shinyApp(ui = ui, server = server) On a bien maintenant le graphique qui saffiche mais lorsquon change le nombre de classes dans la barre slider, rien ne se passe Cest normal, nous navons pas encore introduit de réactivité dans lapplication. Pour cela, il va falloir modifier le code dans la fonction server et ainsi mettre en lien des informations indiquées dans la fonction UI avec les arguments utilisés dans le graphique développé dans la fonction server. Pour linstant, on veut pouvoir modifier le nombre de classes, largument pour cela dans la fonction geom_histogram() dans le ggplot() est bins= ; on a indiqué 100 jusquici ; maintenant il faut lui indiquer le nombre que lutilisateur va lui-même indiquer dans la barre slider ; cela se fait avec largument input$..., les  devant être remplacés par le nom que lon a donné à linputId dans le sliderInput(), donc ici classes. # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Nombre de propriétaires par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;classes&quot;, label = &quot;Nombres de classes&quot;, min = 1, max = 50, value = 25) ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { output$histPlot &lt;- renderPlot({ tab_proprio %&gt;% ggplot() + aes(x=nb_proprio) + geom_histogram(bins=input$classes) }) } shinyApp(ui = ui, server = server) Ça y est, maintenant lorsquon modifie le curseur dans la barre slider, le graphique change ! 7.4 Modification du graphique : filtrer selon une variable Essayons ensuite dajouter un filtre sur le département pour navoir que la distribution du nombre de propriétaires pour un département donné. Comme on na pas de variable de département, il faut la créer, ce que lon peut faire assez facilement à partir des deux premiers chiffres de la commune, et ensuite il suffit dajouter un filtre sur cette nouvelle variable créée. De même, on peut procéder par étapes : présentons dabord le graphique pour le seul département de la Seine-et-Marne (77) car cest là où il y a le plus de communes. # Création de la variable et donc remplacement de la table de données tab_proprio &lt;- tab_proprio %&gt;% mutate(dept=substr(COMMUNE, 1,2)) # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Nombre de propriétaires par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;classes&quot;, label = &quot;Nombres de classes&quot;, min = 1, max = 50, value = 25) ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { output$histPlot &lt;- renderPlot({ tab_proprio %&gt;% filter(dept == &quot;77&quot;) %&gt;% ggplot() + aes(x=nb_proprio) + geom_histogram(bins=input$classes) }) } shinyApp(ui = ui, server = server) Ensuite, donnons la possibilité à lutilisateur de choisir le département quil veut : il faut pour cela ajouter un widget dans la fonction UI ; comme on ne veut laisser quun choix de département à lutilisateur, on peut utiliser un Radio buttons ; on regarde alors quels sont les arguments de la fonction radioButtons(), on voit quil faut indiquer les choix possibles donc ici la liste des départements dans choices = et indiquer une valeur par défaut dans selected = ; pour cela, on peut indiquer la variable correspondante choices = tab_proprio$dept, mais attention si on laisse comme ceci, on va avoir une répétition de noms des départements comme lorsquon ouvre la table, ce quon veut cest uniquement les niveaux deux possibilités alors : soit créer avant lappel de la fonction UI une variable avec simplement les niveaux de cette variable ; soit passer par la fonction unique() dans largument donné. # Quelques modifications du fichier initial de données # tab_proprio &lt;- tab_proprio %&gt;% mutate(dept=as.factor(dept)) # nom_dept &lt;- levels(tab_proprio$dept) # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Nombre de propriétaires par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;classes&quot;, label = &quot;Nombres de classes&quot;, min = 1, max = 50, value = 25), radioButtons(inputId = &quot;dept&quot;, label = &quot;Choix du département&quot;, choices = unique(tab_proprio$dept), #ou indiquer &#39;nom_dept&#39; selected = &quot;77&quot;), ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { output$histPlot &lt;- renderPlot({ tab_proprio %&gt;% filter(dept == &quot;77&quot;) %&gt;% ggplot() + aes(x=nb_proprio) + geom_histogram(bins=input$classes) }) } shinyApp(ui = ui, server = server) Enfin, là encore, il faut introduire la réactivité et connecter la partie UI et la partie server, en remplaçant le nom du département dans le filter(dept == ) par le nom de linputId indiqué dans notre radioButtons : # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Nombre de propriétaires par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;classes&quot;, label = &quot;Nombres de classes&quot;, min = 1, max = 50, value = 25), radioButtons(inputId = &quot;dept&quot;, label = &quot;Choix du département&quot;, choices = unique(tab_proprio$dept), #ou indiquer &#39;nom_dept&#39; selected = &quot;77&quot;), ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { output$histPlot &lt;- renderPlot({ tab_proprio %&gt;% filter(dept == input$dept) %&gt;% ggplot() + aes(x=nb_proprio) + geom_histogram(bins=input$classes) }) } shinyApp(ui = ui, server = server) On peut voir que le nombre de classes maximum de 50 nest absolument pas pertinent pour certains départements qui ont peu de communes, cest quelque chose qui pourra être modifiée bien sûr ultérieurement. 7.5 Modification du graphique : selon une variable au choix parmi deux On peut maintenant vouloir montrer un graphique (toujours le même histogramme) selon au choix deux variables : soit le nombre de propriétaires, soit le nombre de locataires. Il faut donc créer cette dernière variable de la même façon que précédemment pour les propriétaires, et lajouter au tableau précédent (quon renommera puisquil ne concerne plus les seuls propriétaires). tab_locataires_commune_horsparis &lt;- RP %&gt;% filter(COMMUNE != &quot;75056&quot;) %&gt;% somme(STOCD %in% c(&quot;21&quot;,&quot;22&quot;,&quot;23&quot;), var_gpe=COMMUNE, nom_var=nb_locataires, var1=IPONDL) %&gt;% mutate(nb_locataires=round(nb_locataires, 0)) tab_locataires_arrdt_paris &lt;- RP %&gt;% filter(COMMUNE == &quot;75056&quot;) %&gt;% somme(STOCD %in% c(&quot;21&quot;,&quot;22&quot;,&quot;23&quot;), var_gpe=ARM, nom_var=nb_locataires, var1=IPONDL) %&gt;% mutate(nb_locataires=round(nb_locataires, 0)) tab_st_occ &lt;- tab_locataires_arrdt_paris %&gt;% rename(COMMUNE = ARM) %&gt;% rbind(tab_locataires_commune_horsparis) %&gt;% left_join(tab_proprio, by=join_by(&quot;COMMUNE&quot;)) # pour supprimer les tables intermédiaires rm(tab_locataires_commune_horsparis, tab_locataires_arrdt_paris) Procédons comme précédemment : créons un nouveau widget avec par exemple selectInput(), dont linputID sera variable et largument choices = donne les deux variables choisies ; pour cela, on peut utiliser une fonction list() et indiquer le nom des deux variables, soient total_meuros et nombre_entreprises. Et ensuite, dans la fonction server, remplaçons x=total_meuros par x=input$variable et voyons si cela marche ! # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Statut d&#39;occupation des logements par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;classes&quot;, label = &quot;Nombres de classes&quot;, min = 1, max = 50, value = 25), radioButtons(inputId = &quot;dept&quot;, label = &quot;Choix du département&quot;, choices = unique(tab_st_occ$dept), #ou indiquer &#39;nom_dept&#39; selected = &quot;77&quot;), selectInput(inputId = &quot;variable&quot;, label = &quot;Choix de la variable&quot;, choices = list(&quot;nb_proprio&quot;, &quot;nb_locataires&quot;), selected = &quot;nb_proprio&quot;), ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { output$histPlot &lt;- renderPlot({ tab_st_occ %&gt;% filter(dept == input$dept) %&gt;% ggplot() + aes(x=input$variable) + geom_histogram(bins=input$classes) }) } shinyApp(ui = ui, server = server) Et non cela ne fonctionne pas. En réalité, comme nous avons utilisé dans choices = une fonction list() qui fait appel à des variables de type caractère, la fonction ggplot() + aes(x = ) ne comprend pas que la variable appelée est bien une variable numérique (son contenu), elle croît en quelque sorte que cest une variable caractère. Il faut donc dire à la fonction ggplot() ici que le nom de la variable est de type string mais quelle comporte bien des valeurs numériques donc compatible avec un histogramme : pour cela, au lieu de ggplot() + aes(x = ), il faut utiliser ggplot() + aes_string(x = ). Réessayons : # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Statut d&#39;occupation des logements par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;classes&quot;, label = &quot;Nombres de classes&quot;, min = 1, max = 50, value = 25), radioButtons(inputId = &quot;dept&quot;, label = &quot;Choix du département&quot;, choices = unique(tab_st_occ$dept), #ou indiquer &#39;nom_dept&#39; selected = &quot;77&quot;), selectInput(inputId = &quot;variable&quot;, label = &quot;Choix de la variable&quot;, choices = list(&quot;nb_proprio&quot;, &quot;nb_locataires&quot;), selected = &quot;nb_proprio&quot;), ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { output$histPlot &lt;- renderPlot({ tab_st_occ %&gt;% filter(dept == input$dept) %&gt;% ggplot() + aes_string(x=input$variable) + geom_histogram(bins=input$classes) }) } shinyApp(ui = ui, server = server) Un autre exemple avec une boîte à moustache plutôt quun histogramme : # Définition UI et Server de l&#39;application Shiny ui &lt;- fluidPage( # Titre de l&#39;application titlePanel(&quot;Statut d&#39;occupation des logements par commune d&#39;Île-de-france&quot;), # Définition du Widget - ici un slider en vue de construire un histogramme sidebarLayout( sidebarPanel( radioButtons(inputId = &quot;dept&quot;, label = &quot;Choix du département&quot;, choices = unique(tab_st_occ$dept), #ou indiquer &#39;nom_dept&#39; selected = &quot;77&quot;), selectInput(inputId = &quot;variable&quot;, label = &quot;Choix de la variable&quot;, choices = list(&quot;nb_proprio&quot;, &quot;nb_locataires&quot;), selected = &quot;nb_proprio&quot;), ), # Graphe montré à l&#39;utilisateur mainPanel( plotOutput(&quot;histPlot&quot;) ) ) ) server &lt;- function(input, output) { # Base réactive tab_st_occ_react &lt;- reactive({ tab_st_occ %&gt;% filter(dept == input$dept) }) output$histPlot &lt;- renderPlot({ tab_st_occ_react() %&gt;% ggplot() + aes_string(y = input$variable) + geom_boxplot() + coord_flip() + scale_y_continuous(limits=c(0,quantile(tab_st_occ_react()[[input$variable]], 0.75)*2)) + labs(caption=&quot;Rq : les valeurs supérieures à 2 fois le Q3 de la distribution ne sont pas affichées sur le graphique&quot;) }) } shinyApp(ui = ui, server = server) "],["08-Ggplot-theorique.html", "Section 8 Data Visualization et Ggplot2 : aspects théoriques 8.1 Présentation générale de Ggplot2 8.2 Les grands principes de data visualization", " Section 8 Data Visualization et Ggplot2 : aspects théoriques 8.1 Présentation générale de Ggplot2 Le package ggplot2 (inclus dans le package tidyverse) est lun des atouts de R et permet de réaliser de beaux graphiques ; vous en trouverez ici la présentation officielle. Linconvénient, surtout pour quelquun qui serait habitué à construire des graphiques sous excel, est quil faut (presque) tout paramétrer, ce qui peut finalement donner un code très long. Larchitecture globale de ggplot2 est souvent représentée par le schéma ci-dessous : Pour le lire, il faut partir du bas du schéma : par Data, nous devons dabord préciser la base ou le tableau de données utilisé(e) qui contient la ou les variables qui seront représentées ; par aesthetics, nous allons ensuite indiquer les variables qui seront projetées sur le graphe ; par geometries, nous indiquons le type de graphique utilisé ou la forme géométrique ; par facets, nous pouvons éventuellement (facultatif donc) diviser ou découper le graphique en plusieurs graphes (ou panneaux) dépendant dune autre variable par exemple ; par statistics, nous pouvons là aussi éventuellement ajouter des statistiques ; par coordinates, nous pouvons là aussi éventuellement changer le sens du graphique ; enfin, par theme, nous pouvons utiliser éventuellement lun des thèmes graphiques diponibles et/ou ajouter un certain nombre doptions sur ce qui entoure le graphique, cest-à-dire les positions et/ou couleurs et/ou taille, etc., des axes, titre, légende, etc. 8.1.1 Les aesthetics ou arguments esthétiques Il sagit principalement dindiquer quelle variable sera utilisée en abcisse (x=), et laquelle sera éventuellement utilisée en ordonnée (y=). Mais on peut aussi ajouter des variables supplémentaires qui seront différenciées par : couleur, avec color= (pour des points, lignes ou symboles) ou fill= (pour le contenu des bâtons ou symboles) ; taille avec size= ; symboles avec shape= ; type de lignes avec linetype= ; degré de transparence avec alpha= (mais non conseillé pour les variables discrètes). La nuance à bien comprendre est quutiliser ces options à lintérieur de la fonction aes() revient à ajouter une 3ème variable (une légende apparaîtra alors automatiquement), alors que si lon veut simplement changer laspect des points, lignes, barres, etc., dune variable déjà projetée, il faut appeler (souvent) ces mêmes options après la fonction aes() à lintérieur de la fonction geom_***() par exemple. Dans ce cas-là, on peut changer la couleur des points avec color= , la taille des points ou lignes avec size=, lépaisseur des barres avec width=, etc. Cest la différence entre le mapping et les settings. Chacune de ces options ont des modalités différentes, il peut être bien davoir des mémos rangés dans un dossier créé pour cela pour éviter de les chercher à chaque fois. Par exemple, pour les couleurs, vous trouverez un mémo pdf ici, ou un bon récapitulatif là. On peut également utiliser la fonction colours() pour voir la liste complète des couleurs standard. Pour la liste des symboles (shape) et le numéro correspondant que lon appelera avec largument shape=, ci-dessous un récapitulatif : Et voici pour la liste des types de lignes, avec linetype= : 8.1.2 Les géométries Une fois les variables appelées, il faut définir le type de graphique. Il y a beaucoup de choix possibles inclus dans ggplot2, le tout est de bien comprendre quel type de graphique convient le mieux à ou aux variables utilisées et à ce que lon veut montrer (cf. section suivante sur les grands principes de la data visualization). Voici un tableau récapitulant les principales geometries. Tableau : Les principales fonctions geometries de Ggplot Fonction Type de graphique Type de variable(s) geom_histogram() Histogramme 1 variable continue geom_density() Courbe de densité 1 variable continue geom_area() Graphique en aires empilées 1 variable continue geom_col() Graphique en bâtons 1 variable discrète geom_point() Nuage de points 2 variables continues geom_jitter() Nuage de points dispersés 2 variables continues geom_boxplot() Boîte à moustache 1 variable continue, sans ou avec 1 variable discrète geom_violin() Graphes en violon 1 variable continue, sans ou avec 1 variable discrète geom_bar() Graphique en bâtons 1 variable continue, sans ou avec 1 variable discrète geom_line() Lignes Fonction continue selon une variable de date geom_area() Graphique en aires empilées Fonction continue selon une variable de date Certaines dentre elles ont des options à préciser, presque de façon obligatoire comme nous lavons déjà vu avec geom_histogram() et loption bins=, si elle nest pas précisée, elle sera forcée par R mais un message davertissement en rouge apparaîtra. Il en existe bien sûr plein dautres, il faut dans ce cas rechercher sur internet ou aller voir sur la cheatsheet de ggplot2 disponible sur internet. Il est possible de faire suivre plusieurs fonctions geom_***() : par exemple un geom_line() après un geom_point(), un geom_text() après un geom_bar(), etc. Dans ce cas, des variables supplémentaires peuvent être ajoutées (ou remplacer les précédentes) avec une nouvelle fonction aes à lintérieur de ce geom_***() ; un exemple assez courant est la construction dun graphique en bâtons avec lajout des valeurs de la variable à lintérieur des bâtons (ou juste au-dessus), on fera alors appel à deux fonction geom_***() comme ceci : data %&gt;% ggplot() + aes(x=, y=) + geom_bar() + geom_text(aes(label=)). De même, il est possible de spécifier des données (data) différentes pour chaque geom_***() . 8.1.3 Les facettes Il y a deux types de facettes (en réalité trois, avec celle par défaut qui sintitule facet_null() et produit un seul graphe) : facet_wrap() : produit une suite de graphiques et a un argument principal facets=vars() et éventuellement ncol= et nrow= ; facet_grid() : produit une grille ou matrice de graphiques définies par une ou deux variables qui forment les lignes et les colonnes, définies avec les deux arguments principaux cols= et row=, ou en indiquant un ~ entre les deux variables. À savoir, il y a des options pour contrôler les échelles avec largument scales=. Les facettes sont ainsi une autre façon, par rapport aux aesthetics, de représenter deux variables par rapport à une troisième variable. 8.1.4 Les statistiques On peut vouloir ajouter sur un graphique des statistiques particulières ou supplémentaires, comme la moyenne ou médiane dune variable quantitative, ou encore représenter la régression linéaire dans le cas dune variable fonction dune autre, etc. Par exemple, si lon projette des boîtes à moustache, la moyenne nétant pas affichée on peut la rajouter avec la fonction stat_summary() et loption fun = mean. Si lon souhaite ajouter une régression linéaire sur un graphique de nuage de points, il faut utiliser la fonction geom_smooth() et loption method=lm. Certaines statistiques peuvent aussi être calculées ou transformées directement dans certaines fonctions : cest par exemple le cas avec la fonction geom_histogramm() où lon peut produire un histogramme de la densité en spécifiant y=..density.. dans laes() ou en la superposant à laide dune courbe à lhistogramme initial en ajoutant alors ensuite un geom_density() ; ou encore avec la fonction geom_bar() avec les arguments stat = \"summary_bin\", fun = mean (par défaut, stat = \"count\", dans ce cas la hauteur des barres représente le comptage des cas dans chaque catégorie). 8.1.5 Les coordonnées Les systèmes de coordonnées linéaires permettent de changer le sens du graphique ou de zoomer sur le graphique : coord_cartesian() : cest le système de coordonnées par défaut (repère cartésien), en changeant les arguments xlim= ou ylim=, on procède à un zoom sur laxe des abscisses et/ou celui des ordonnées ; cela permet de ne pas supprimer des données comme le ferait les fonctions scale_x_continuous() ou scale_y_continuous mais juste de ne pas les afficher sur le graphe ; coord_flip() : permet dinverser les axes ; coord_fixed() : produit un système de coordonnées cartésiennes avec un ratio daspect fixe. Il existe également des systèmes de coordonnées non-linéaires, comme coord_polar() par exemple. 8.1.6 Les thèmes Il y a plusieurs thèmes existants dans le package ggplot2, theme_gray() est le thème par défaut ; les autres sont présentés dans la figure ci-dessous. Ensuite, la fonction theme() permet de modifier les aspects du graphique : il y a un certain nombre darguments disponibles qui permettent de modifier les éléments entourant le graphique comme les titre et sous-titre, les éléments à lintérieur du graphique cest-à-dire de la grille, les éléments des axes, ou encore les éléments de la légende (ou sa position sur la figure), etc. La figure ci-dessous est une bonne synthèse de la manière dont il faut programmer ces différentes éléments du thème dun graphique (téléchargeable directement ici) : 8.1.7 Les autres options graphiques : titres, échelles des axes, etc. Pour le titre général, mais aussi les titres des axes, ainsi quune éventuelle légende, source, etc., on peut les rassembler dans la fonction labs() : labs( title = &quot; &quot;, subtitle = &quot; &quot;, x = &quot; &quot;, y = &quot; &quot;, caption = &quot; &quot;) Les axes des échelles peuvent être changés, ainsi que les valeurs affichées, avec les fonctions scale : si les variables sont quantitatives/continues, avec scale_x_continous() et scale_y_continuous() ; si les variables sont qualitatives/discrètes, avec scale_x_discrete() et scale_x_discrete() ; dont les options les plus souvent utilisées sont limits=, breaks=, labels=, ou encore trans= qui permet de transformer la mesure de léchelle (exponentielle, log, ). Lorsquune option fill= ou color= est utilisée dans un aes, alors on peut modifier le type de couleurs ou palettes utilisées avec par exemple scale_fill_brewer() pour la pallette de couleur RBrewer ou scale_fill_viridis() pour la palette Viridis, etc. Il y a encore dautres fonctions qui permettent de customiser à votre goût un graphique ggplot, il faut saventurer dans les diverses documentations plus complètes sur le package ggplot2. 8.1.8 Code minimal Après lappel de la fonction ggplot(), chaque couche supplémentaire utilisée est précisée par le signe + et non lhabituel pipe %&gt;% pour bien signifier quon est toujours dans la fonction ggplot(), par ailleurs il faut faire attention de mettre le signe + à la fin dune ligne et ensuite de faire un saut de ligne (le contraire saut de ligne et début de la ligne suivante avec le + ne fonctionnera pas). Les trois arguments obligatoires sont donc les 3 premières : data, aesthethics et geometries. En langage tidyverse, il existe plusieurs façons décrire le code : # Les 4 façons d&#39;écrire suivantes sont similaires : data %&gt;% # on spécifie la table de données ggplot() + # on appelle la fonction ggplot() aes(x = , y = ) + # on spécifie dans l&#39;aes() les variables à mettre dans l&#39;axe # des abcisses (x=) et dans l&#39;axe des ordonnées (y=) geom_histogram() # on trace l&#39;histogramme data %&gt;% ggplot(aes(x = , y = )) + geom_histogram() ggplot(data) + aes(x = , y = ) + geom_histogram() ggplot(data, aes(x = , y = )) + geom_histogram() Nous privilégierons ici la 1ère dentre elles, mais vous pouvez en choisir une autre ! 8.1.9 Liens utiles pour aller plus loin Nous ne pouvons pas résumer lensemble des possibilités données par ggplot2 ; il faudra donc rechercher par soi-même si besoin. Voici pour cela deux sites très complets sur le package : https://ggplot2-book.org/toolbox.html target=_blank https://bookdown.org/ael/rexplor/chap8.html#aes target=_blank 8.2 Les grands principes de data visualization Sans prétendre, ni pouvoir, faire un cours complet de data visualization, voici quelques grands principes à essayer de respecter quand on souhaite représenter graphiquement des résultats issus du traitement de données : savoir au préalable le message principal que lon souhaite faire passer : cela peut sembler évident, mais il faut toujour avoir cela en tête ; construire un graphique intelligible par le plus grand nombre : des graphiques trop sophistiqués, trop chargés dinformations, etc., ne permettront pas de transmettre le message souhaité. Cela peut bien sûr varier selon le public, mais ; situer le graphique : avec un titre explicite, éventuellement un sous-titre, ensuite avec une légende reprenant le champ et/ou la source, etc. ; choisir le bon graphique selon le type de variables à représenter : variable continue ou discrète, croisement dun type de variable avec un autre type, variables dépendant du temps (évolution), etc. ; présenter le graphique de manière la plus objective possible : ne pas tordre le graphique pour faire apparaître un résultat qui nest pas si évident que cela (cest typiquement lexemple dun changement déchelle ; dun zoom sur laxe des y sur un graphique en évolution par exemple, pour montrer des variations qui ne seraient pas visibles si laxe commençait à 0) ; rajouter des informations (étiquettes de nom, valeur, etc.) sans trop surcharger le grapheiqu néanmoins ; être logique dans la contruction des éléments extérieurs au graphe : par exemple, ordre des modalités dune légende située à droite selon le point darrivée des courbes ; ordre des modalités dune variable discrète (par exemple le niveau de diplôme) ou selon la moyenne/médiane dune autre variable par ordre croissant ou décroissant ; utiliser (le plus possible) des axes similaires pour comparer deux grahes côte à cote. Ce chapitre de cours donne des conseils synthétiques : cf. ici ; ou cet article-là. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
